from visual import *
import random, itertools, pickle
def midpoint(x1, y1,z1, x2, y2,z2):
    return ((x1 + x2)/2, (y1 + y2)/2, (z1 + z2)/2)
def calc_dist(p1,p2):
    return math.sqrt((p2[0] - p1[0]) ** 2 +
                     (p2[1] - p1[1]) ** 2 +
                    (p2[2] - p1[2]) ** 2)
md=0
G = 6.671281903963040991511534289 * 10**-11
log10=math.log10
pi=math.pi
log=math.log
ke=8.9875517873681764*10**9
av=6.0221413*10**23
amu=1.66053886 * 10**-27
e= 5.4857990946*10**-4
pro=1.007276466812
neu=1.00866491600
H=pro+e
D=H+neu
T=D+neu
He=(H*2)+(neu*2)
Li=D*3
Be=D*4+neu
B=D*5
C=D*6
N=D*7
O=D*8
F=D*9+neu
Ne=D*10
Na=22.9898
Mg=24.3050
Al=26.9815
Si=28.0855
P=30.9738
S=32.066
Cl=D*17+neu
Ar=D*18
K=D*19+neu
Ca=40.078
Sc=44.9559
Ti=47.88
V=50.9415
Cr=51.9961
Mn=54.9380
Fe=D*26+(neu*4)
Co=D*27+(neu*5)
Ni=58.693
Cu=63.546
Zn=65.39
Ga=69.723
Ge=72.61
As=74.9216
Se=78.96
Br=79.904
Kr=83.80
Rb=85.4678
Sr=D*38+(neu*14)
Y=88.9059
Zr=91.224
Nb=92.9064
Mo=95.94
Tc=98
Ru=101.07
Rh=102.9055
Pd=106.42
Ag=107.8682
Cd=112.411
In=114.82
Sn=118.710
Sb=121.757
Te=127.60
I=D*53+(neu*21)
Xe=D*54+(neu*24)
Cs=D*55+(neu*23)
Ba=137.327
La=138.9055
Ce=140.115
Pr=140.9076
Nd=144.24
Pm=145
Sm=150.36
Eu=151.965
Gd=157.25
Tb=158.9253
Dy=162.50
Ho=164.9303
Er=167.26
Tm=168.9342
Yb=173.04
Ac=227
Th=D*90+(neu*52)
Pa=231.0359
U=D*92+(neu*54)
Np=D*93+(neu*51)
Pu=D*94+(neu*56)
Am=D*95+(neu*51)
Cm=247
Bk=247
Cf=251
Es=252
Fm=257
Md=258
No=259
Lr=260
Rf=267
Db=268
Sg=271
Bh=272
Hs=270
Mt=276
Ds=281
Rg=280
Cn=285
Lu=174.967
Hf=178.49
Ta=180.9479
W=183.85
Re=186.207
Os=190.2
Ir=192.22
Pt=195.08
Au=196.9665
Hg=200.59
Tl=204.3833
Pb=D*82+(neu*44)
Bi=D*83+(neu*43)
Po=209
At=210
Rn=D*86+(neu*50)
Fr=223
Ra=D*88+(neu*50)
Gr=9.80665
ang=0.0000000001
Atoms=pickle.dumps(dict(amu=1.66053886 * 10**-27,e= 5.4857990946*10**-4,pro=1.007276466812,neu=1.00866491600,H=pro+e,D=H+neu,T=D+neu,He=(H*2)+(neu*2),Li=D*3,Be=D*4+neu,B=D*5,C=D*6,N=D*7,O=D*8,F=D*9+neu,Ne=D*10,Na=22.9898,Mg=24.3050,Al=26.9815,Si=28.0855,P=30.9738,S=32.066,Cl=D*17+neu,Ar=D*18,K=D*19+neu,Ca=40.078,Sc=44.9559,Ti=47.88,V=50.9415,Cr=51.9961,Mn=54.9380,Fe=D*26+(neu*4),Co=D*27+(neu*5),Ni=58.693,Cu=63.546,Zn=65.39,Ga=69.723,Ge=72.61,As=74.9216,Se=78.96,Br=79.904,Kr=83.80,Rb=85.4678,Sr=D*38+(neu*14),Y=88.9059,Zr=91.224,Nb=92.9064,Mo=95.94,Tc=98,Ru=101.07,Rh=102.9055,Pd=106.42,Ag=107.8682,Cd=112.411,In=114.82,Sn=118.710,Sb=121.757,Te=127.60,I=D*53+(neu*21),Xe=D*54+(neu*24),Cs=D*55+(neu*23),Ba=137.327,La=138.9055,Ce=140.115,Pr=140.9076,Nd=144.24,Pm=145,Sm=150.36,Eu=151.965,Gd=157.25,Tb=158.9253,Dy=162.50,Ho=164.9303,Er=167.26,Tm=168.9342,Yb=173.04,Ac=227,Th=D*90+(neu*52),Pa=231.0359,U=D*92+(neu*54),Np=D*93+(neu*51),Pu=D*94+(neu*56),Am=D*95+(neu*51),Cm=247,Bk=247,Cf=251,Es=252,Fm=257,Md=258,No=259,Lr=260,Rf=267,Db=268,Sg=271,Bh=272,Hs=270,Mt=276,Ds=281,Rg=280,Cn=285,Lu=174.967,Hf=178.49,Ta=180.9479,W=183.85,Re=186.207,Os=190.2,Ir=192.22,Pt=195.08,Au=196.9665,Hg=200.59,TI=204.3833,Pb=D*82+(neu*44),Bi=D*83+(neu*43),Po=209,At=210,Rn=D*86+(neu*50),Fr=223,Ra=D*88+(neu*50)))
Atomsr=pickle.dumps(dict(H=0.790*ang,Li=2.050*ang,Na=2.230*ang,K=2.770*ang,Rb=2.980*ang,Cs=3.340*ang,Be=1.400*ang,Mg=1.720*ang,Ca=2.230*ang,Sr=2.450*ang,Ba=2.780*ang,Sc=2.090*ang,Y=2.270*ang,La=2.740*ang,Ti=2.000*ang,Zr=2.160*ang,Hf=2.160*ang,V=1.920*ang,Nb=2.080*ang,Ta=2.090*ang,Ce=2.700*ang,Cr=1.850*ang,Mo=2.010*ang,W=2.020*ang,Pr=2.670*ang,Mn=1.790*ang,Tc=1.950*ang,Re=1.970*ang,Nd=2.640*ang,Fe=1.720*ang,Ru=1.890*ang,Os=1.970*ang,Pm=2.620*ang,Co=1.670*ang,Rh=1.830*ang,Ir=1.870*ang,Sm=2.590*ang,Ni=1.620*ang,Pd=1.790*ang,Pt=1.830*ang,Eu=2.560*ang,Cu=1.570*ang,Ag=1.750*ang,Au=1.790*ang,Gd=2.540*ang,Zn=1.530*ang,Cd=1.710*ang,Hg=1.760*ang,Tb=2.510*ang,B=1.170*ang,Al=1.820*ang,Ga=1.810*ang,In=2.000*ang,Tl=2.080*ang,Dy=2.490*ang,C=0.910*ang,Si=1.460*ang,Ge=1.520*ang,Sn=1.720*ang,Pb=1.810*ang,Ho=2.470*ang,N=0.750*ang,P=1.260*ang,As=1.330*ang,Sb=1.530*ang,Bi=1.630*ang,Er=2.450*ang,O=0.650*ang,S=1.090*ang,Se=1.220*ang,Te=1.420*ang,Po=1.530*ang,Tm=2.420*ang,F=0.570*ang,Cl=0.970*ang,Br=1.120*ang,I=1.320*ang,At=1.430*ang,Yb=2.400*ang,He=0.490*ang,Ne=0.510*ang,Ar=0.880*ang,Kr=1.030*ang,Xe=1.240*ang,Rn=1.340*ang,Lu=2.250*ang,Fr=0,Ra=0,Ac=0,Th=0,Pa=0,U=0,Np=0,Pu=0,Am=0,Cm=0,Bk=0,Cf=0,Es=0,Fm=0,Md=0,No=0,Lr=0,Rf=0, Db=0, Sg=0,Bh=0,Hs=0,Mt=0,Ds=0,Rg=0,Cn=0))
class proton():
    def __init__(self):
        self.fnet=0
        self.r=  8.768*10**-16
        self.A=4*pi*self.r**2
        self.m=1.007276466812
        self.v=(4/3)*pi*self.r**3
        self.p=2*pi*self.r
class neutron():
    def __init__(self):
        self.r=8.768*10**-16
        self.A=4*pi*self.r**2
        self.m=1.00866491600
        self.v=(4/3)*pi*self.r**3
        self.p=2*pi*self.r
class electron():
    def __init__(self):
        self.r=2.817940326727 * 10**-15
        self.A=4*pi*self.r**2
        self.m= 5.4857990946*10**-4
        self.v=(4/3)*pi*self.r**3
        self.p=2*pi*self.r
        self.M=9.10938291 * 10**-31
class world():
    def __init__(self):
        self.A=atom()
        self.q=1.60217656535*10**-19
        self.Proton=proton()
        self.Neutron=neutron()
        self.Electron=electron()
    
    gc=6.67384 * 10**-11
    str1=0
    q=1.60217656535*10**-19
    ke= 8.9875517873681764*10**9
	
    def fg(self):
        fg=self.mass()*Gr
        return fg
    def pmom(self):
        pmom=self.mass()*self.velocity
        return pmom
    Pmom=0
    impact=0
    collision=0
    if collision>0:
        self.velocity+=impact
    fnet=0
    velocity=0
    if velocity>0:
        self.velocity-=fg()
    time=0
    direct=''
    dXx=0
    dxX=0
    dYy=0
    dyY=0
    dZz=0
    dzZ=0
    dAa=0
    daA=0
    dBb=0
    dbB=0
    dCc=0
    dcC=0
    dDd=0
    ddD=0
    
    eIn=0
    eOut=0
    
    
    
    
    def right(self):
        self.x['x']+=1
    def left(self):
        self.x['x']-=1
    def up(self):
        self.x['y']+=1
    def down(self):
        self.x['y']-=1
    def forward(self):
        self.x['z']+=1
    def backward(self):
        self.x['z']-=1
    def gAa(self):
        self.x['y']+=1
        self.x['x']-=1
        self.x['z']+=1
    def gaA(self):
        self.x['y']-=1
        self.x['x']+=1
        self.x['z']-=1
    def gBb(self):
        self.x['y']+=1
        self.x['x']+=1
        self.x['z']+=1
    def gbB(self):
        self.x['y']-=1
        self.x['x']-=1
        self.x['z']-=1
    def gCc(self):
        self.x['y']-=1
        self.x['x']+=1
        self.x['z']+=1
    def gcC(self):
        self.x['y']+=1
        self.x['x']-=1
        self.x['z']-=1
    def gDd(self):
        self.x['y']-=1
        self.x['x']-=1
        self.x['z']+=1
    def gdD(self):
        self.x['y']+=1
        self.x['x']+=1
        self.x['z']-=1
##switch
    def Rright(self):
        self.x['x']-=1
    def Rleft(self):
        self.x['x']+=1
    def Rup(self):
        self.x['y']-=1
    def Rdown(self):
        self.x['y']+=1
    def Rforward(self):
        self.x['z']-=1
    def Rbackward(self):
        self.x['z']+=1
    def RgAa(self):
        self.x['y']-=1
        self.x['x']+=1
        self.x['z']-=1
    def RgaA(self):
        self.x['y']+=1
        self.x['x']-=1
        self.x['z']+=1
    def RgBb(self):
        self.x['y']-=1
        self.x['x']-=1
        self.x['z']-=1
    def RgbB(self):
        self.x['y']+=1
        self.x['x']+=1
        self.x['z']+=1
    def RgCc(self):
        self.x['y']+=1
        self.x['x']-=1
        self.x['z']-=1
    def RgcC(self):
        self.x['y']-=1
        self.x['x']+=1
        self.x['z']+=1
    def RgDd(self):
        self.x['y']+=1
        self.x['x']+=1
        self.x['z']-=1
    def RgdD(self):
        self.x['y']-=1
        self.x['x']-=1
        self.x['z']+=1
        
            
    ONEs= False
    ones=False
    TWOs=False
    twos=False
    TWOp=False
    twop=False
    tWop=False
    Twop=False
    twOp=False
    twoP=False
    THREEs=False
    threes=False
    THREEp=False
    threep=False
    Threep=False
    tHreep=False
    thReep=False
    thrEep=False
    FOURs=False
    fours=False
    THREEd=False
    threed=False
    Threed=False
    tHreed=False
    thReed=False
    thrEed=False
    threEd=False
    threeD=False
    THreed=False
    tHReed=False
    FOURp=False
    fourp=False
    Fourp=False
    fOurp=False
    foUrp=False
    fouRp=False
    FIVEs=False
    fives=False
    FOURd=False
    fourd=False
    Fourd=False
    fOurd=False
    foUrd=False
    fouRd=False
    fourD=False
    FOurd=False
    fOUrd=False
    foURd=False
    FIVEp=False
    fivep=False
    Fivep=False
    fIvep=False
    fiVep=False
    fivEp=False
    SIXs=False
    sixs=False
    FOURf=False
    fourf=False
    Fourf=False
    fOurf=False
    foUrf=False
    fouRf=False
    fourF=False
    FOurf=False
    fOUrf=False
    foURf=False
    fouRF=False
    FOUrf=False
    fOURf=False
    foURF=False
    FIVEd=False
    fived=False
    Fived=False
    fIved=False
    fiVed=False
    fivEd=False
    fiveD=False
    FIved=False
    fIVed=False
    fiVEd=False
    SIXp=False
    sixp=False
    Sixp=False
    sIxp=False
    siXp=False
    sixP=False
    SEVENs=False
    sevens=False
    FIVEf=False
    fivef=False
    Fivef=False
    fIvef=False
    fiVef=False
    fivEf=False
    fiveF=False
    FIvef=False
    fIVef=False
    fiVEf=False
    fivEF=False
    FIVef=False
    fIVEf=False
    fiVEF=False
    SIXd=False
    sixd=False
    Sixd=False
    sIxd=False
    siXd=False
    sixD=False
    SIxd=False
    sIXd=False
    siXD=False
    SIXd=False
    SEVENp=False
    sevenp=False
    Sevenp=False
    sEvenp=False
    seVenp=False
    sevEnp=False
    EIGHTs=False
    eights=False
    
    def eo(self):
        e=0
        Ee=0
        
        z=0
        s=2
        p=6
        d=10
        f=14
        A=18
        B=22
        C=26
        D=30
        E=34
        F=38
        b=float(1)
        Co=0
        s1=0
        s2=0
        s3=0
        s4=0
        s5=0
        s6=0
        s7=0
        s8=0
        s9=0
        ##this counts electrons and keeps track of current shell
        if self.ONEs==True:
            e+=b
            
        if self.ones==True:
            e+=b
            s1+=1
            
        if self.TWOs==True:
            e+=b
        if self.twos==True:
            e+=b
        if self.TWOp==True:
            e+=b
        if self.twop==True:
            e+=b
        if self.Twop==True:
            e+=b
        if self.tWop==True:
            e+=b
        if self.twOp==True:
            e+=b
        if self.twoP==True:
            e+=b
            s2+=1
            s1-=1
        if self.THREEs==True:
            e+=b
        if self.threes==True:
            e+=b
        if self.THREEp==True:
            e+=b
        if self.threep==True:
            e+=b
        if self.Threep==True:
            e+=b
        if self.tHreep==True:
            e+=b
        if self.thReep==True:
            e+=b
        if self.thrEep==True:
            e+=b
        if self.FOURs==True:
            e+=b
        if self.fours==True:
            e+=b
            Ee+=2
        if self.THREEd==True:
            e+=b
        if self.threed==True:
            e+=b
        if self.Threed==True:
            e+=b
        if self.tHreed==True:
            e+=b
        if self.thReed==True:
            e+=b
        if self.thrEed==True:
            e+=b
        if self.threEd==True:
            e+=b
        if self.threeD==True:
            e+=b
        if self.THreed==True:
            e+=b
        if self.tHReed==True:
            e+=b
            s3+=1
            s2-=1
            Ee-=2
        if self.FOURp==True:
            e+=b
        if self.fourp==True:
            e+=b
        if self.Fourp==True:
            e+=b
        if self.fOurp==True:
            e+=b
        if self.foUrp==True:
            e+=b
        if self.fouRp==True:
            e+=b
        if self.FIVEs==True:
            e+=b
        if self.fives==True:
            e+=b
            Ee+=2
        if self.FOURd==True:
            e+=b
        if self.fourd==True:
            e+=b
        if self.Fourd==True:
            e+=b
        if self.fOurd==True:
            e+=b
        if self.foUrd==True:
            e+=b
        if self.fouRd==True:
            e+=b
        if self.fourD==True:
            e+=b
        if self.FOurd==True:
            e+=b
        if self.fOUrd==True:
            e+=b
        if self.foURd==True:
            e+=b
        if self.FIVEp==True:
            e+=b
        if self.fivep==True:
            e+=b
        if self.Fivep==True:
            e+=b
        if self.fIvep==True:
            e+=b
        if self.fiVep==True:
            e+=b
        if self.fivEp==True:
            e+=b
        if self.SIXs==True:
            e+=b
        if self.sixs==True:
            e+=b
        if self.FOURf==True:
            e+=b
        if self.fourf==True:
            e+=b
        if self.Fourf==True:
            e+=b
        if self.fOurf==True:
            e+=b
        if self.foUrf==True:
            e+=b
        if self.fouRf==True:
            e+=b
        if self.fourF==True:
            e+=b
        if self.FOurf==True:
            e+=b
        if self.fOUrf==True:
            e+=b
        if self.foURf==True:
            e+=b
        if self.fouRF==True:
            e+=b
        if self.FOUrf==True:
            e+=b
        if self.fOURf==True:
            e+=b
        if self.foURF==True:
            e+=b
            s4+=1
            s3-=1
            Ee+=2
        if self.FIVEd==True:
            e+=b
        if self.fived==True:
            e+=b
        if self.Fived==True:
            e+=b
        if self.fIved==True:
            e+=b
        if self.fiVed==True:
            e+=b
        if self.fivEd==True:
            e+=b
        if self.fiveD==True:
            e+=b
        if self.FIved==True:
            e+=b
        if self.fIVed==True:
            e+=b
        if self.fiVEd==True:
            e+=b
        if self.SIXp==True:
            e+=b
        if self.sixp==True:
            e+=b
        if self.Sixp==True:
            e+=b
        if self.sIxp==True:
            e+=b
        if self.siXp==True:
            e+=b
        if self.sixP==True:
            e+=b
        if self.SEVENs==True:
            e+=b
        if self.sevens==True:
            e+=b
        if self.FIVEf==True:
            e+=b
        if self.fivef==True:
            e+=b
        if self.Fivef==True:
            e+=b
        if self.fIvef==True:
            e+=b
        if self.fiVef==True:
            e+=b
        if self.fivEf==True:
            e+=b
        if self.fiveF==True:
            e+=b
        if self.FIvef==True:
            e+=b
        if self.fIVef==True:
            e+=b
        if self.fiVEf==True:
            e+=b
        if self.fivEF==True:
            e+=b
        if self.FIVef==True:
            e+=b
        if self.fIVEf==True:
            e+=b
        if self.fiVEF==True:
            e+=b
        if self.SIXd==True:
            e+=b
        if self.sixd==True:
            e+=b
        if self.Sixd==True:
            e+=b
        if self.sIxd==True:
            e+=b
        if self.siXd==True:
            e+=b
        if self.sixD==True:
            e+=b
        if self.SIxd==True:
            e+=b
        if self.sIXd==True:
            e+=b
        if self.siXD==True:
            e+=b
        if self.SIXd==True:
            e+=b
        if self.SEVENp==True:
            e+=b
        if self.sevenp==True:
            e+=b
        if self.Sevenp==True:
            e+=b
        if self.sEvenp==True:
            e+=b
        if self.seVenp==True:
            e+=b
        if self.sevEnp==True:
            e+=b
        ##past orbitals in all shells
        Ps=0
        if e in range(0,2):
            Ps=0
        elif e in range(2,4):
            Ps=2
        elif e in range(4,10):
            Ps=4
        elif e in range(10,12):
            Ps=10
        elif e in range(12,18):
            Ps=12
        elif e in range(18,20):
            Ps=18
        elif e in range(20,30):
            Ps=20
        elif e in range(30,36):
            Ps=30
        elif e in range(36,38):
            Ps=36
        elif e in range(38,48):
            Ps=38
        elif e in range(48,54):
            Ps=48
        elif e in range(54,56):
            Ps=54
        elif e in range(56,70):
            Ps=56
        elif e in range(70,80):
            Ps=70
        elif e in range(80,86):
            Ps=80
        elif e in range(86,88):
            Ps=86
        elif e in range(88,102):
            Ps=88
        elif e in range(102,112):
            Ps=102
        elif e in range(112,118):
            Ps=112
        elif e in range(118,120):
            Ps=118
        elif e in range(120,138):
            Ps=120
        elif e in range(138,152):
            Ps=138
        elif e in range(152,162):
            Ps=152
        elif e in range(162,168):
            Ps=162
        elif e in range(168,170):
            Ps=168
        elif e in range(170,188):
            Ps=170
        elif e in range(188,202):
            Ps=188
        elif e in range(202,212):
            Ps=202
        ##previous full shells
        Fs=0
        if e in range(0,2):
            Fs=0
        elif e in range(2,4):
            Fs=2
        elif e in range(4,10):
            Fs=2
        elif e in range(10,12):
            Fs=10
        elif e in range(12,18):
            Fs=10
        elif e in range(18,20):
            Fs=10
        elif e in range(20,30):
            Fs=10
        elif e in range(30,36):
            Fs=28
        elif e in range(36,38):
            Fs=28
        elif e in range(38,48):
            Fs=28
        elif e in range(48,54):
            Fs=28
        elif e in range(54,56):
            Fs=28
        elif e in range(56,70):
            Fs=28
        elif e in range(70,80):
            Fs=60   
        elif e in range(80,86):
            Fs=60
        elif e in range(86,88):
            Fs=60
        elif e in range(88,102):
            Fs=60
        elif e in range(102,112):
            Fs=60
        elif e in range(112,118):
            Fs=60
        elif e in range(118,120):
            Fs=60
        elif e in range(120,138):
            Fs=60
        elif e in range(138,152):
            Fs=110
        elif e in range(152,162):
            Fs=110
        elif e in range(162,168):
            Fs=110
        elif e in range(168,170):
            Fs=110
        elif e in range(170,188):
            Fs=110
        elif e in range(188,202):
            Fs=110
        elif e in range(202,212):
            Fs=110
        ##current orbital
        if e in range(1,2):
            Co=s
        elif e in range(3,4):
            Co=s
        elif e in range(5,10):
            Co=p
        elif e in range(11,12):
            Co=s
        elif e in range(13,18):
            Co=p
        elif e in range(19,20):
            Co=s
        elif e in range(21,30):
            Co=d
        elif e in range(31,36):
            Co=p
        elif e in range(37,38):
            Co=s
        elif e in range(39,48):
            Co=d
        elif e in range(49,54):
            Co=p
        elif e in range(55,56):
            Co=s
        elif e in range(57,70):
            Co=f
        elif e in range(71,80):
            Co=d
        elif e in range(81,86):
            Co=p
        elif e in range(87,88):
            Co=s
        elif e in range(89,102):
            Co=f
        elif e in range(103,112):
            Co=d
        elif e in range(113,118):
            Co=p
        elif e in range(119,120):
            Co=s
        elif e in range(121,138):
            Co=A
        elif e in range(139,152):
            Co=f
        elif e in range(153,162):
            Co=d
        elif e in range(163,168):
            Co=p
        elif e in range(169,170):
            Co=s
        elif e in range(171,188):
            Co=A
        ##shell capacity
        ONE=s
        TWO=s+p
        THREE=s+p+d
        FOUR=s+p+d+f
        FIVE=s+p+d+f+A
        SIX=s+p+d+f+A+B
        SEVEN=s+p+d+f+A+B+C
        EIGHT=s+p+d+f+A+B+C+E
        NINE=s+p+d+f+A+B+C+E+F
        ##which shell
        shell=0
        if e<=2:
            shell=1
        elif e<=10:
            shell=2
        elif e<=18:
            shell=3
        elif e<=36:
            shell=4
        elif e<=54:
            shell=5
        elif e<=86:
            shell=6
        elif e<=118:
            shell=7
        elif e<=168:
            shell=8
        ##what is the capacity total for current shell
        Ct=0
        if shell==1:
            Ct=ONE
        elif shell==2:
            Ct=TWO
        elif shell==3:
            Ct=THREE
        elif shell==4:
            Ct=FOUR
        elif shell==5:
            Ct=FIVE
        elif shell==6:
            Ct=SIX
        elif shell==7:
            Ct=SEVEN
        elif shell==8:
            Ct=EIGHT
        ##what is the next orbital
        nO=0
        if e in range(1,2):
            nO=s
        elif e in range(3,4):
            nO=p
        elif e in range(5,10):
            nO=s
        elif e in range(11,12):
            nO=p
        elif e in range(13,18):
            nO=s
        elif e in range(19,20):
            nO=d
        elif e in range(21,30):
            nO=p
        elif e in range(31,36):
            nO=s
        elif e in range(37,38):
            nO=d
        elif e in range(39,48):
            nO=p
        elif e in range(49,54):
            nO=s
        elif e in range(55,56):
            nO=f
        elif e in range(57,70):
            nO=d
        elif e in range(71,80):
            nO=p
        elif e in range(81,86):
            nO=s
        elif e in range(87,88):
            nO=f
        elif e in range(89,102):
            nO=d
        elif e in range(103,112):
            nO=p
        elif e in range(113,118):
            nO=s
        elif e in range(119,120):
            nO=A
        elif e in range(121,138):
            nO=f
        elif e in range(139,152):
            nO=d
        elif e in range(153,162):
            nO=p
        elif e in range(163,168):
            nO=s
        elif e in range(169,170):
            nO=A
        elif e in range(171,188):
            nO=f
        V=e-Ps
        v=e-Fs
        B=Co-V
        ##for when e == Ps
        if V==0:
            if s1==1:
                V=e-ONE
            elif s2==1:
                V=e-TWO
            elif s3==1:
                V=e-THREE
            elif s4==1:
                V=e-FOUR
            elif s5==1:
                V=e-FIVE
            elif s6==1:
                V=e-SIX
            elif s7==1:
                V=e-SEVEN
            elif s8==1:
                V=e-EIGHT
            elif s9==1:
                V=e-NINE
        ve=V-v
        Es=Ct-v
        Be=(Co-B)+Ee
        
        try:
            return Co
        except:
            nil=0
            ZeroDivisionError
            return nil
    
    def e(self):
        e=0
        Ee=0
        
        z=0
        s=2
        p=6
        d=10
        f=14
        A=18
        B=22
        C=26
        D=30
        E=34
        F=38
        b=float(1)
        Co=0
        s1=0
        s2=0
        s3=0
        s4=0
        s5=0
        s6=0
        s7=0
        s8=0
        s9=0
        ##this counts electrons and keeps track of current shell
        if self.ONEs==True:
            e+=b
            
        if self.ones==True:
            e+=b
            s1+=1
            
        if self.TWOs==True:
            e+=b
        if self.twos==True:
            e+=b
            Ee+=2#2s
        if self.TWOp==True:
            e+=b
            Ee-=2#2sg
        if self.twop==True:
            e+=b
        if self.Twop==True:
            e+=b
        if self.tWop==True:
            e+=b
        if self.twOp==True:
            e+=b
        if self.twoP==True:
            e+=b
            s2+=1
            s1-=1
        if self.THREEs==True:
            e+=b
        if self.threes==True:
            e+=b
            Ee+=2#3s
        if self.THREEp==True:
            e+=b
            
        if self.threep==True:
            e+=b
        if self.Threep==True:
            e+=b
        if self.tHreep==True:
            e+=b
        if self.thReep==True:
            e+=b
        if self.thrEep==True:
            e+=b
            Ee-=2#3sg
        if self.FOURs==True:
            e+=b
        if self.fours==True:
            e+=b
            Ee+=2#4s
        if self.THREEd==True:
            e+=b
            
            
        if self.threed==True:
            e+=b
        if self.Threed==True:
            e+=b
        if self.tHreed==True:
            e+=b
        if self.thReed==True:
            e+=b
        if self.thrEed==True:
            e+=b
        if self.threEd==True:
            e+=b
        if self.threeD==True:
            e+=b
        if self.THreed==True:
            e+=b
        if self.tHReed==True:
            e+=b
            s3+=1
            s2-=1
            
        if self.FOURp==True:
            e+=b
            Ee-=2#4sg
        if self.fourp==True:
            e+=b
        if self.Fourp==True:
            e+=b
        if self.fOurp==True:
            e+=b
        if self.foUrp==True:
            e+=b
        if self.fouRp==True:
            e+=b
            
        if self.FIVEs==True:
            e+=b
        if self.fives==True:
            e+=b
            Ee+=2#5s
        if self.FOURd==True:
            e+=b
            
        if self.fourd==True:
            e+=b
        if self.Fourd==True:
            e+=b
        if self.fOurd==True:
            e+=b
        if self.foUrd==True:
            e+=b
        if self.fouRd==True:
            e+=b
        if self.fourD==True:
            e+=b
        if self.FOurd==True:
            e+=b
        if self.fOUrd==True:
            e+=b
        if self.foURd==True:
            e+=b
            
        if self.FIVEp==True:
            e+=b
            Ee-=2#5sg
        if self.fivep==True:
            e+=b
        if self.Fivep==True:
            e+=b
        if self.fIvep==True:
            e+=b
        if self.fiVep==True:
            e+=b
        if self.fivEp==True:
            e+=b
        if self.SIXs==True:
            e+=b
        if self.sixs==True:
            e+=b
            Ee+=2#6s
        if self.FOURf==True:
            e+=b
            
        if self.fourf==True:
            e+=b
        if self.Fourf==True:
            e+=b
        if self.fOurf==True:
            e+=b
        if self.foUrf==True:
            e+=b
        if self.fouRf==True:
            e+=b
        if self.fourF==True:
            e+=b
        if self.FOurf==True:
            e+=b
        if self.fOUrf==True:
            e+=b
        if self.foURf==True:
            e+=b
        if self.fouRF==True:
            e+=b
        if self.FOUrf==True:
            e+=b
        if self.fOURf==True:
            e+=b
        if self.foURF==True:
            e+=b
            s4+=1
            s3-=1
            
        if self.FIVEd==True:
            e+=b
        if self.fived==True:
            e+=b
        if self.Fived==True:
            e+=b
        if self.fIved==True:
            e+=b
        if self.fiVed==True:
            e+=b
        if self.fivEd==True:
            e+=b
        if self.fiveD==True:
            e+=b
        if self.FIved==True:
            e+=b
        if self.fIVed==True:
            e+=b
        if self.fiVEd==True:
            e+=b
        if self.SIXp==True:
            e+=b
            Ee-=2#6sg
        if self.sixp==True:
            e+=b
        if self.Sixp==True:
            e+=b
        if self.sIxp==True:
            e+=b
        if self.siXp==True:
            e+=b
        if self.sixP==True:
            e+=b
        if self.SEVENs==True:
            e+=b
        if self.sevens==True:
            e+=b
            Ee+=2#7s
        if self.FIVEf==True:
            e+=b
            
        if self.fivef==True:
            e+=b
        if self.Fivef==True:
            e+=b
        if self.fIvef==True:
            e+=b
        if self.fiVef==True:
            e+=b
        if self.fivEf==True:
            e+=b
        if self.fiveF==True:
            e+=b
        if self.FIvef==True:
            e+=b
        if self.fIVef==True:
            e+=b
        if self.fiVEf==True:
            e+=b
        if self.fivEF==True:
            e+=b
        if self.FIVef==True:
            e+=b
        if self.fIVEf==True:
            e+=b
        if self.fiVEF==True:
            e+=b
            
        if self.SIXd==True:
            e+=b
        if self.sixd==True:
            e+=b
        if self.Sixd==True:
            e+=b
        if self.sIxd==True:
            e+=b
        if self.siXd==True:
            e+=b
        if self.sixD==True:
            e+=b
        if self.SIxd==True:
            e+=b
        if self.sIXd==True:
            e+=b
        if self.siXD==True:
            e+=b
        if self.SIXd==True:
            e+=b
        if self.SEVENp==True:
            e+=b
            Ee-=2#7sg
        if self.sevenp==True:
            e+=b
        if self.Sevenp==True:
            e+=b
        if self.sEvenp==True:
            e+=b
        if self.seVenp==True:
            e+=b
        if self.sevEnp==True:
            e+=b
        ##past orbitals in all shells
        Ps=0
        if e in range(0,2):
            Ps=0
        elif e in range(2,4):
            Ps=2
        elif e in range(4,10):
            Ps=4
        elif e in range(10,12):
            Ps=10
        elif e in range(12,18):
            Ps=12
        elif e in range(18,20):
            Ps=18
        elif e in range(20,30):
            Ps=20
        elif e in range(30,36):
            Ps=30
        elif e in range(36,38):
            Ps=36
        elif e in range(38,48):
            Ps=38
        elif e in range(48,54):
            Ps=48
        elif e in range(54,56):
            Ps=54
        elif e in range(56,70):
            Ps=56
        elif e in range(70,80):
            Ps=70
        elif e in range(80,86):
            Ps=80
        elif e in range(86,88):
            Ps=86
        elif e in range(88,102):
            Ps=88
        elif e in range(102,112):
            Ps=102
        elif e in range(112,118):
            Ps=112
        elif e in range(118,120):
            Ps=118
        elif e in range(120,138):
            Ps=120
        elif e in range(138,152):
            Ps=138
        elif e in range(152,162):
            Ps=152
        elif e in range(162,168):
            Ps=162
        elif e in range(168,170):
            Ps=168
        elif e in range(170,188):
            Ps=170
        elif e in range(188,202):
            Ps=188
        elif e in range(202,212):
            Ps=202
        ##previous full shells
        Fs=0
        if e in range(0,2):
            Fs=0
        elif e in range(2,4):
            Fs=2
        elif e in range(4,10):
            Fs=2
        elif e in range(10,12):
            Fs=10
        elif e in range(12,18):
            Fs=10
        elif e in range(18,20):
            Fs=10
        elif e in range(20,30):
            Fs=10
        elif e in range(30,36):
            Fs=28
        elif e in range(36,38):
            Fs=28
        elif e in range(38,48):
            Fs=28
        elif e in range(48,54):
            Fs=28
        elif e in range(54,56):
            Fs=28
        elif e in range(56,70):
            Fs=28
        elif e in range(70,80):
            Fs=60   
        elif e in range(80,86):
            Fs=60
        elif e in range(86,88):
            Fs=60
        elif e in range(88,102):
            Fs=60
        elif e in range(102,112):
            Fs=60
        elif e in range(112,118):
            Fs=60
        elif e in range(118,120):
            Fs=60
        elif e in range(120,138):
            Fs=60
        elif e in range(138,152):
            Fs=110
        elif e in range(152,162):
            Fs=110
        elif e in range(162,168):
            Fs=110
        elif e in range(168,170):
            Fs=110
        elif e in range(170,188):
            Fs=110
        elif e in range(188,202):
            Fs=110
        elif e in range(202,212):
            Fs=110
        ##current orbital
        if e in range(1,2):
            Co=s
        elif e in range(3,4):
            Co=s
        elif e in range(5,10):
            Co=p
        elif e in range(11,12):
            Co=s
        elif e in range(13,18):
            Co=p
        elif e in range(19,20):
            Co=s
        elif e in range(21,30):
            Co=d
        elif e in range(31,36):
            Co=p
        elif e in range(37,38):
            Co=s
        elif e in range(39,48):
            Co=d
        elif e in range(49,54):
            Co=p
        elif e in range(55,56):
            Co=s
        elif e in range(57,70):
            Co=f
        elif e in range(71,80):
            Co=d
        elif e in range(81,86):
            Co=p
        elif e in range(87,88):
            Co=s
        elif e in range(89,102):
            Co=f
        elif e in range(103,112):
            Co=d
        elif e in range(113,118):
            Co=p
        elif e in range(119,120):
            Co=s
        elif e in range(121,138):
            Co=A
        elif e in range(139,152):
            Co=f
        elif e in range(153,162):
            Co=d
        elif e in range(163,168):
            Co=p
        elif e in range(169,170):
            Co=s
        elif e in range(171,188):
            Co=A
        ##shell capacity
        ONE=s
        TWO=s+p
        THREE=s+p+d
        FOUR=s+p+d+f
        FIVE=s+p+d+f+A
        SIX=s+p+d+f+A+B
        SEVEN=s+p+d+f+A+B+C
        EIGHT=s+p+d+f+A+B+C+E
        NINE=s+p+d+f+A+B+C+E+F
        ##which shell
        shell=0
        if e<=2:
            shell=1
        elif e<=10:
            shell=2
        elif e<=18:
            shell=3
        elif e<=36:
            shell=4
        elif e<=54:
            shell=5
        elif e<=86:
            shell=6
        elif e<=118:
            shell=7
        elif e<=168:
            shell=8
        ##what is the capacity total for current shell
        Ct=0
        if shell==1:
            Ct=ONE
        elif shell==2:
            Ct=TWO
        elif shell==3:
            Ct=THREE
        elif shell==4:
            Ct=FOUR
        elif shell==5:
            Ct=FIVE
        elif shell==6:
            Ct=SIX
        elif shell==7:
            Ct=SEVEN
        elif shell==8:
            Ct=EIGHT
        ##past shells
        Psh=0
        if shell==1:
            Psh=0
        elif shell==2:
            Psh=ONE
        elif shell==3:
            Psh=TWO
        elif shell==4:
            Psh=THREE
        elif shell==5:
            Psh=FOUR
        elif shell==6:
            Psh=FIVE
        elif shell==7:
            Psh=SIX
        elif shell==8:
            Psh=SEVEN
        ##what is the next orbital
        nO=0
        if e in range(1,2):
            nO=s
        elif e in range(3,4):
            nO=p
        elif e in range(5,10):
            nO=s
        elif e in range(11,12):
            nO=p
        elif e in range(13,18):
            nO=s
        elif e in range(19,20):
            nO=d
        elif e in range(21,30):
            nO=p
        elif e in range(31,36):
            nO=s
        elif e in range(37,38):
            nO=d
        elif e in range(39,48):
            nO=p
        elif e in range(49,54):
            nO=s
        elif e in range(55,56):
            nO=f
        elif e in range(57,70):
            nO=d
        elif e in range(71,80):
            nO=p
        elif e in range(81,86):
            nO=s
        elif e in range(87,88):
            nO=f
        elif e in range(89,102):
            nO=d
        elif e in range(103,112):
            nO=p
        elif e in range(113,118):
            nO=s
        elif e in range(119,120):
            nO=A
        elif e in range(121,138):
            nO=f
        elif e in range(139,152):
            nO=d
        elif e in range(153,162):
            nO=p
        elif e in range(163,168):
            nO=s
        elif e in range(169,170):
            nO=A
        elif e in range(171,188):
            nO=f
        V=e-Ps
        v=e-Fs
        B=Co-V
        ##for when e == Ps
        if V==0:
            if s1==1:
                V=e-ONE
            elif s2==1:
                V=e-TWO
            elif s3==1:
                V=e-THREE
            elif s4==1:
                V=e-FOUR
            elif s5==1:
                V=e-FIVE
            elif s6==1:
                V=e-SIX
            elif s7==1:
                V=e-SEVEN
            elif s8==1:
                V=e-EIGHT
            elif s9==1:
                V=e-NINE
        ve=V-v
        Es=Ct-v
        Be=(Co-B)+Ee
        if Ee!=0:
            B+=Ee
        
            
        try:
            return B 
        except:
            nil=0
            ZeroDivisionError
            return nil
    def be(self):
        e=0
        Ee=0
        
        z=0
        s=2
        p=6
        d=10
        f=14
        A=18
        B=22
        C=26
        D=30
        E=34
        F=38
        b=float(1)
        Co=0
        s1=0
        s2=0
        s3=0
        s4=0
        s5=0
        s6=0
        s7=0
        s8=0
        s9=0
        ##this counts electrons and keeps track of current shell
        if self.ONEs==True:
            e+=b
            
        if self.ones==True:
            e+=b
            s1+=1
            
        if self.TWOs==True:
            e+=b
        if self.twos==True:
            e+=b
            Ee+=2#2s
        if self.TWOp==True:
            e+=b
            Ee-=2#2sg
        if self.twop==True:
            e+=b
        if self.Twop==True:
            e+=b
        if self.tWop==True:
            e+=b
        if self.twOp==True:
            e+=b
        if self.twoP==True:
            e+=b
            s2+=1
            s1-=1
        if self.THREEs==True:
            e+=b
        if self.threes==True:
            e+=b
            Ee+=2#3s
        if self.THREEp==True:
            e+=b
            
        if self.threep==True:
            e+=b
        if self.Threep==True:
            e+=b
        if self.tHreep==True:
            e+=b
        if self.thReep==True:
            e+=b
        if self.thrEep==True:
            e+=b
            Ee-=2#3sg
        if self.FOURs==True:
            e+=b
        if self.fours==True:
            e+=b
            Ee+=2#4s
        if self.THREEd==True:
            e+=b
            
            
        if self.threed==True:
            e+=b
        if self.Threed==True:
            e+=b
        if self.tHreed==True:
            e+=b
        if self.thReed==True:
            e+=b
        if self.thrEed==True:
            e+=b
        if self.threEd==True:
            e+=b
        if self.threeD==True:
            e+=b
        if self.THreed==True:
            e+=b
        if self.tHReed==True:
            e+=b
            s3+=1
            s2-=1
            
        if self.FOURp==True:
            e+=b
            Ee-=2#4sg
        if self.fourp==True:
            e+=b
        if self.Fourp==True:
            e+=b
        if self.fOurp==True:
            e+=b
        if self.foUrp==True:
            e+=b
        if self.fouRp==True:
            e+=b
            
        if self.FIVEs==True:
            e+=b
        if self.fives==True:
            e+=b
            Ee+=2#5s
        if self.FOURd==True:
            e+=b
            
        if self.fourd==True:
            e+=b
        if self.Fourd==True:
            e+=b
        if self.fOurd==True:
            e+=b
        if self.foUrd==True:
            e+=b
        if self.fouRd==True:
            e+=b
        if self.fourD==True:
            e+=b
        if self.FOurd==True:
            e+=b
        if self.fOUrd==True:
            e+=b
        if self.foURd==True:
            e+=b
            
        if self.FIVEp==True:
            e+=b
            Ee-=2#5sg
        if self.fivep==True:
            e+=b
        if self.Fivep==True:
            e+=b
        if self.fIvep==True:
            e+=b
        if self.fiVep==True:
            e+=b
        if self.fivEp==True:
            e+=b
        if self.SIXs==True:
            e+=b
        if self.sixs==True:
            e+=b
            Ee+=2#6s
        if self.FOURf==True:
            e+=b
            
        if self.fourf==True:
            e+=b
        if self.Fourf==True:
            e+=b
        if self.fOurf==True:
            e+=b
        if self.foUrf==True:
            e+=b
        if self.fouRf==True:
            e+=b
        if self.fourF==True:
            e+=b
        if self.FOurf==True:
            e+=b
        if self.fOUrf==True:
            e+=b
        if self.foURf==True:
            e+=b
        if self.fouRF==True:
            e+=b
        if self.FOUrf==True:
            e+=b
        if self.fOURf==True:
            e+=b
        if self.foURF==True:
            e+=b
            s4+=1
            s3-=1
            
        if self.FIVEd==True:
            e+=b
        if self.fived==True:
            e+=b
        if self.Fived==True:
            e+=b
        if self.fIved==True:
            e+=b
        if self.fiVed==True:
            e+=b
        if self.fivEd==True:
            e+=b
        if self.fiveD==True:
            e+=b
        if self.FIved==True:
            e+=b
        if self.fIVed==True:
            e+=b
        if self.fiVEd==True:
            e+=b
        if self.SIXp==True:
            e+=b
            Ee-=2#6sg
        if self.sixp==True:
            e+=b
        if self.Sixp==True:
            e+=b
        if self.sIxp==True:
            e+=b
        if self.siXp==True:
            e+=b
        if self.sixP==True:
            e+=b
        if self.SEVENs==True:
            e+=b
        if self.sevens==True:
            e+=b
            Ee+=2#7s
        if self.FIVEf==True:
            e+=b
            
        if self.fivef==True:
            e+=b
        if self.Fivef==True:
            e+=b
        if self.fIvef==True:
            e+=b
        if self.fiVef==True:
            e+=b
        if self.fivEf==True:
            e+=b
        if self.fiveF==True:
            e+=b
        if self.FIvef==True:
            e+=b
        if self.fIVef==True:
            e+=b
        if self.fiVEf==True:
            e+=b
        if self.fivEF==True:
            e+=b
        if self.FIVef==True:
            e+=b
        if self.fIVEf==True:
            e+=b
        if self.fiVEF==True:
            e+=b
            
        if self.SIXd==True:
            e+=b
        if self.sixd==True:
            e+=b
        if self.Sixd==True:
            e+=b
        if self.sIxd==True:
            e+=b
        if self.siXd==True:
            e+=b
        if self.sixD==True:
            e+=b
        if self.SIxd==True:
            e+=b
        if self.sIXd==True:
            e+=b
        if self.siXD==True:
            e+=b
        if self.SIXd==True:
            e+=b
        if self.SEVENp==True:
            e+=b
            Ee-=2#7sg
        if self.sevenp==True:
            e+=b
        if self.Sevenp==True:
            e+=b
        if self.sEvenp==True:
            e+=b
        if self.seVenp==True:
            e+=b
        if self.sevEnp==True:
            e+=b
        ##past orbitals in all shells
        Ps=0
        if e in range(0,2):
            Ps=0
        elif e in range(2,4):
            Ps=2
        elif e in range(4,10):
            Ps=4
        elif e in range(10,12):
            Ps=10
        elif e in range(12,18):
            Ps=12
        elif e in range(18,20):
            Ps=18
        elif e in range(20,30):
            Ps=20
        elif e in range(30,36):
            Ps=30
        elif e in range(36,38):
            Ps=36
        elif e in range(38,48):
            Ps=38
        elif e in range(48,54):
            Ps=48
        elif e in range(54,56):
            Ps=54
        elif e in range(56,70):
            Ps=56
        elif e in range(70,80):
            Ps=70
        elif e in range(80,86):
            Ps=80
        elif e in range(86,88):
            Ps=86
        elif e in range(88,102):
            Ps=88
        elif e in range(102,112):
            Ps=102
        elif e in range(112,118):
            Ps=112
        elif e in range(118,120):
            Ps=118
        elif e in range(120,138):
            Ps=120
        elif e in range(138,152):
            Ps=138
        elif e in range(152,162):
            Ps=152
        elif e in range(162,168):
            Ps=162
        elif e in range(168,170):
            Ps=168
        elif e in range(170,188):
            Ps=170
        elif e in range(188,202):
            Ps=188
        elif e in range(202,212):
            Ps=202
        ##previous full shells
        Fs=0
        if e in range(0,2):
            Fs=0
        elif e in range(2,4):
            Fs=2
        elif e in range(4,10):
            Fs=2
        elif e in range(10,12):
            Fs=10
        elif e in range(12,18):
            Fs=10
        elif e in range(18,20):
            Fs=10
        elif e in range(20,30):
            Fs=10
        elif e in range(30,36):
            Fs=28
        elif e in range(36,38):
            Fs=28
        elif e in range(38,48):
            Fs=28
        elif e in range(48,54):
            Fs=28
        elif e in range(54,56):
            Fs=28
        elif e in range(56,70):
            Fs=28
        elif e in range(70,80):
            Fs=60   
        elif e in range(80,86):
            Fs=60
        elif e in range(86,88):
            Fs=60
        elif e in range(88,102):
            Fs=60
        elif e in range(102,112):
            Fs=60
        elif e in range(112,118):
            Fs=60
        elif e in range(118,120):
            Fs=60
        elif e in range(120,138):
            Fs=60
        elif e in range(138,152):
            Fs=110
        elif e in range(152,162):
            Fs=110
        elif e in range(162,168):
            Fs=110
        elif e in range(168,170):
            Fs=110
        elif e in range(170,188):
            Fs=110
        elif e in range(188,202):
            Fs=110
        elif e in range(202,212):
            Fs=110
        ##current orbital
        if e in range(1,2):
            Co=s
        elif e in range(3,4):
            Co=s
        elif e in range(5,10):
            Co=p
        elif e in range(11,12):
            Co=s
        elif e in range(13,18):
            Co=p
        elif e in range(19,20):
            Co=s
        elif e in range(21,30):
            Co=d
        elif e in range(31,36):
            Co=p
        elif e in range(37,38):
            Co=s
        elif e in range(39,48):
            Co=d
        elif e in range(49,54):
            Co=p
        elif e in range(55,56):
            Co=s
        elif e in range(57,70):
            Co=f
        elif e in range(71,80):
            Co=d
        elif e in range(81,86):
            Co=p
        elif e in range(87,88):
            Co=s
        elif e in range(89,102):
            Co=f
        elif e in range(103,112):
            Co=d
        elif e in range(113,118):
            Co=p
        elif e in range(119,120):
            Co=s
        elif e in range(121,138):
            Co=A
        elif e in range(139,152):
            Co=f
        elif e in range(153,162):
            Co=d
        elif e in range(163,168):
            Co=p
        elif e in range(169,170):
            Co=s
        elif e in range(171,188):
            Co=A
        ##shell capacity
        ONE=s
        TWO=s+p
        THREE=s+p+d
        FOUR=s+p+d+f
        FIVE=s+p+d+f+A
        SIX=s+p+d+f+A+B
        SEVEN=s+p+d+f+A+B+C
        EIGHT=s+p+d+f+A+B+C+E
        NINE=s+p+d+f+A+B+C+E+F
        ##which shell
        shell=0
        if e<=2:
            shell=1
        elif e<=10:
            shell=2
        elif e<=18:
            shell=3
        elif e<=36:
            shell=4
        elif e<=54:
            shell=5
        elif e<=86:
            shell=6
        elif e<=118:
            shell=7
        elif e<=168:
            shell=8
        ##what is the capacity total for current shell
        Ct=0
        if shell==1:
            Ct=ONE
        elif shell==2:
            Ct=TWO
        elif shell==3:
            Ct=THREE
        elif shell==4:
            Ct=FOUR
        elif shell==5:
            Ct=FIVE
        elif shell==6:
            Ct=SIX
        elif shell==7:
            Ct=SEVEN
        elif shell==8:
            Ct=EIGHT
        ##past shells
        Psh=0
        if shell==1:
            Psh=0
        elif shell==2:
            Psh=ONE
        elif shell==3:
            Psh=TWO
        elif shell==4:
            Psh=THREE
        elif shell==5:
            Psh=FOUR
        elif shell==6:
            Psh=FIVE
        elif shell==7:
            Psh=SIX
        elif shell==8:
            Psh=SEVEN
        ##what is the next orbital
        nO=0
        if e in range(1,2):
            nO=s
        elif e in range(3,4):
            nO=p
        elif e in range(5,10):
            nO=s
        elif e in range(11,12):
            nO=p
        elif e in range(13,18):
            nO=s
        elif e in range(19,20):
            nO=d
        elif e in range(21,30):
            nO=p
        elif e in range(31,36):
            nO=s
        elif e in range(37,38):
            nO=d
        elif e in range(39,48):
            nO=p
        elif e in range(49,54):
            nO=s
        elif e in range(55,56):
            nO=f
        elif e in range(57,70):
            nO=d
        elif e in range(71,80):
            nO=p
        elif e in range(81,86):
            nO=s
        elif e in range(87,88):
            nO=f
        elif e in range(89,102):
            nO=d
        elif e in range(103,112):
            nO=p
        elif e in range(113,118):
            nO=s
        elif e in range(119,120):
            nO=A
        elif e in range(121,138):
            nO=f
        elif e in range(139,152):
            nO=d
        elif e in range(153,162):
            nO=p
        elif e in range(163,168):
            nO=s
        elif e in range(169,170):
            nO=A
        elif e in range(171,188):
            nO=f
        V=e-Ps
        v=e-Fs
        B=Co-V
        ##for when e == Ps
        if V==0:
            if s1==1:
                V=e-ONE
            elif s2==1:
                V=e-TWO
            elif s3==1:
                V=e-THREE
            elif s4==1:
                V=e-FOUR
            elif s5==1:
                V=e-FIVE
            elif s6==1:
                V=e-SIX
            elif s7==1:
                V=e-SEVEN
            elif s8==1:
                V=e-EIGHT
            elif s9==1:
                V=e-NINE
        ve=V-v
        Es=Ct-v
        Be=(Co-B)#+Ee
        if Ee!=0:
            B+=Ee
        
            
        try:
            return Be 
        except:
            nil=0
            ZeroDivisionError
            return nil
class heA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(2)
        self.Q=self.e()*self.q
        self.tb=0
        self.bonds=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('He')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=24.587387936
        self.en=0
        self.ONEs= True
        self.ones=True
        self.weight=He
        self.Mass=self.weight/Gr
    def mass(self):
        m=(H*2)+(neu*2)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    def rEN(self):
        en=()
   
class neA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(10)
        self.Q=self.e()*self.q
        self.tb=0
        self.bonds=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ne')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=21.564540
        self.en=0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.weight=Ne
        self.Mass=self.weight/Gr

    
    def mass(self):
        m=D*10
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
class arA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(18)
        self.Q=self.e()*self.q
        self.tb=0
        self.bonds=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ar')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=15.7596112
        self.en=0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.weight=Ar
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=D*18
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q

class hA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(1)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.bs=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('H')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=13.598434005136
        self.en=2.1
        self.ONEs= True
        self.weight=H
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=pro+e
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q

class liA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(3)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Li')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.391714761
        self.en=1.0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.weight=Li
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=D*3
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q

class fA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(9)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('F')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=17.42282
        self.en=4.0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.weight=F
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=D*9+neu
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
  
class naA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(11)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Na')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.1390767
        self.en=0.9
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.weight=Na
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=D*11+neu
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class kA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(19)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('K')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=4.34066354
        self.en=0.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.weight=K
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=D*19+neu
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class rbA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(37)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Rb')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=4.177128
        self.en=0.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.weight=Rb
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=(D*27)+(T*10)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class csA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(55)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Cs')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=3.893905548
        self.en=0.7
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.weight=Cs
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=(D*33)+(T*22)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class frA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(87)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Fr')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=4.0727409
        self.en=0.7
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.weight=Fr
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*39)+(T*48)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class beA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(4)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Be')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=9.322699
        self.en=1.5
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.weight=Be
        self.Mass=self.weight/Gr

    
    def mass(self):
        m=(D*3)+T
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
class oA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(8)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('O')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=13.618054
        self.en=3.5
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.weight=O
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=D*8
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
class caA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(20)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ca')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.11315520
        self.en=1.0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.weight=Ca
        self.Mass=self.weight/Gr

    
    
    def mass(self):
        m=D*20
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
class mgA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(12)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Mg')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.646235
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.weight=Mg
        self.Mass=self.weight/Gr
    
    
    
    def mass(self):
        m=D*12
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
class cuA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(29)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Cu')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.726380
        self.en=1.9
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.weight=Cu
        self.Mass=self.weight/Gr
    
    
    
    def mass(self):
        m=(D*27)+(T*3)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class znA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(30)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Zn')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=9.3941990
        self.en=1.6
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.weight=Zn
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=(D*28)+(T*3)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class krA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(36)
        self.Q=self.e()*self.q
        self.bonds=0
        self.tb=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Kr')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=13.9996049
        self.en=0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.weight=Kr
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=(D*31)+(T*7)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class srA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(38)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Sr')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.69486720
        self.en=1.0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.weight=Sr
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*33)+(T*7)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class cdA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(48)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Cd')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.993822
        self.en=1.7
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.weight=Cd
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=(D*44)+(T*8)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class baA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(56)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ba')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.211664
        self.en=0.9
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.weight=Ba
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*56)+(T*8)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class raA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(88)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ra')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.278424
        self.en=0.9
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.weight=Ra
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*94)+(T*12)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class bA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(5)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('B')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.2980190
        self.en=2.0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.weight=B
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*5)+(T*.25)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class nA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(7)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('N')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=14.53413
        self.en=3.0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.weight=N
        self.Mass=self.weight/Gr
    
    def mass(self):
        x={'x':0,'y':0,'z':0}
        m=(D*7)-(T*.036)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class scA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(21)
        self.Q=self.e()*self.q
        self.tb=11
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Sc')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.56149
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.weight=Sc
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*16)+(T*4.2)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class alA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(13)
        self.Q=self.e()*self.q
        self.tb=7
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Al')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.985768
        self.en=1.5
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.weight=Al
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=26.9815
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class gaA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(31)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ga')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.9993018
        self.en=1.6
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.weight=Ga
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=69.723
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class yA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(39)
        self.Q=self.e()*self.q
        self.tb=11
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Y')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.21726
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.weight=Y
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=88.9059
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
      
class agA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(47)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ag')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.576234
        self.en=1.9
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.weight=Ag
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=107.8682
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class indA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(49)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('In')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.7863552
        self.en=1.7
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.weight=In
        self.Mass=self.weight/Gr 
    
    def mass(self):
        m=114.818
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class laA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(57)
        self.Q=self.e()*self.q
        self.tb=15
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.b11=0
        self.b12=0
        self.b13=0
        self.b14=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('La')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.5769
        self.en=1.1
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.weight=La
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=138.906
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
        
    
class ndA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(60)
        self.Q=self.e()*self.q
        self.tb=12
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.b11=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Nd')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.5250
        self.en=1.1
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.weight=Nd
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=144.24
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class pmA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(61)
        self.Q=self.e()*self.q
        self.tb=11
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Pm')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.582
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.weight=Pm
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*41)+(T*21)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class smA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(62)
        self.Q=self.e()*self.q
        self.tb=10
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Sm')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.64371
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.weight=Sm
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=150.36
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class euA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(63)
        self.Q=self.e()*self.q
        self.tb=9
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Eu')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.670385
        self.en=1.1
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.weight=Eu
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=151.965
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class gdA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(64)
        self.Q=self.e()*self.q
        self.tb=8
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Gd')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.14980
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.weight=Gd
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=157.25
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class dyA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(66)
        self.Q=self.e()*self.q
        self.tb=6
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Dy')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.93905
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.weight=Dy
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=162.50
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class hoA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(67)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ho')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.0215
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.weight=Ho
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=164.9303
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class erA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(68)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Er')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.1077
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.weight=Er
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=167.26
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class tmA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(69)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Tm')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.18431
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.weight=Tm
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=168.9342
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class ybA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(70)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Yb')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.254159
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.weight=Yb
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=173.04
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class luA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(71)
        self.Q=self.e()*self.q
        self.tb=11
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Lu')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.425871
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.weight=Lu
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=174.967
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class tlA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(81)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Tl')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.1082871
        self.en=1.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.weight=Tl
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=204.38332
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class tiA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(22)
        self.Q=self.e()*self.q
        self.tb=10
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ti')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.82812
        self.en=1.5
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.weight=Ti
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=47.8671
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class acA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(89)
        self.Q=self.e()*self.q
        self.tb=15
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.b11=0
        self.b12=0
        self.b13=0
        self.b14=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ac')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.380226
        self.en=1.1
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.weight=Ac
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=227.028
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class fmA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(100)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Fm')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.50
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.weight=Fm
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*100)+(T*18.3)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class mdA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(101)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Md')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.58
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.weight=Md
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*101)+(T*18)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class noA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(102)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('No')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.65
        self.en=1.5
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.weight=No
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*102)+(T*17.75)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class lrA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(103)
        self.Q=self.e()*self.q
        self.tb=10
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Lr')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=4.90
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.weight=Lr
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*103)+(T*17.3)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class cA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(6)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('C')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=11.260296
        self.en=2.5
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.weight=C
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*6)-(T*0.029)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class siA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(14)
        self.Q=self.e()*self.q
        self.tb=6
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Si')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.151683
        self.en=1.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.weight=Si
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=28.0855
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class mnA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(25)
        self.Q=self.e()*self.q
        self.tb=7
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Mn')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.434018
        self.en=1.5
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.weight=Mn
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=54.9380
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class feA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(26)
        self.Q=self.e()*self.q
        self.tb=6
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Fe')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.9024678
        self.en=1.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.weight=Fe
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*24)+(T*2.48)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class coA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(27)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Co')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.88101
        self.en=1.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.weight=Co
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=58.9332
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class niA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(28)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ni')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.639877
        self.en=1.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.weight=Ni
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=58.693
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class geA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(32)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ge')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.899435
        self.en=1.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.weight=Ge
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=72.61
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class zrA(world):
    
    def __init__(self):
        self.A=atom()
        self.A.sets(40)
        self.Q=self.e()*self.q
        self.tb=10
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Zr')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.63390
        self.en=1.4
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.weight=Zr
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=91.224
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class pdA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(46)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Pd')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.33686
        self.en=2.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.weight=Pd
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=106.42
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class snA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(50)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Sn')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.343917
        self.en=1.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.weight=Sn
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=118.710
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class ceA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(58)
        self.Q=self.e()*self.q
        self.tb=14
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.b11=0
        self.b12=0
        self.b13=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ce')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.5386
        self.en=1.1
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.weight=Ce
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=140.115
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class prA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(59)
        self.Q=self.e()*self.q
        self.tb=13
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.b11=0
        self.b12=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Pr')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.473
        self.en=1.1
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.weight=Pr
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=140.908
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class tbA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(65)
        self.Q=self.e()*self.q
        self.tb=7
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Tb')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.8638
        self.en=1.2
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.weight=Tb
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=158.925
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class hfA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(72)
        self.Q=self.e()*self.q
        self.tb=10
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Hf')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.825069
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.weight=Hf
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=178.49
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class hgA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(80)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Hg')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=10.437504
        self.en=1.9
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.weight=Hg
        self.Mass=self.weight/Gr
    
    
    def mass(self):
        m=200.59
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class pbA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(82)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Pb')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.4166796
        self.en=1.9
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.weight=Pb
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=207.2
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class thA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(90)
        self.Q=self.e()*self.q
        self.tb=14
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.b11=0
        self.b12=0
        self.b13=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Th')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.3067
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.weight=Th
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=232.038
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class amA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(95)
        self.Q=self.e()*self.q
        self.tb=9
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Am')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.9738
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.weight=Am
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*76)+(T*29.95)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
      
class cmA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(96)
        self.Q=self.e()*self.q
        self.tb=8
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Cm')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.9914
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.weight=Cm
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*79)+(T*28.99)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class bkA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(97)
        self.Q=self.e()*self.q
        self.tb=7
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Bk')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.1978
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.weight=Bk
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*79)+(T*29)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class cfA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(98)
        self.Q=self.e()*self.q
        self.tb=7
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Cf')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.2817
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.weight=Cf
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*82)+(T*28.5)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class esA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(99)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Es')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.3676
        self.en=1.3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.weight=Es
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*83)+(T*28)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class rfA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(104)
        self.Q=self.e()*self.q
        self.tb=9
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Rf')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.01
        self.en=0
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.weight=Rf
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*89)+(T*27)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class pA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(15)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('P')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=10.486686
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.weight=P
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=30.9738
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class clA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(17)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Cl')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=12.96763
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.weight=Cl
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=35.4527
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class vA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(23)
        self.Q=self.e()*self.q
        self.tb=9
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('V')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.746187
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.weight=V
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=50.9415
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class arsA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(33)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ar')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=9.7886
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.weight=Ar
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=74.9216
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class brA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(35)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Br')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=11.81381
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.weight=Br
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=79.904
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class nbA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(41)
        self.Q=self.e()*self.q
        self.tb=9
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Nb')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.75885
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.weight=Nb
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=92.9064
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class sbA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(51)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Sb')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.608389
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.weight=Sb
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=121.76
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class taA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(73)
        self.Q=self.e()*self.q
        self.tb=9
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ta')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.549571
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.weight=Ta
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=180.948
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class auA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(79)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Au')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=9.225553
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.weight=Au
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=196.967
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class biA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(83)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Bi')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.285516
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.weight=Bi
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=208.980
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class paA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(91)
        self.Q=self.e()*self.q
        self.tb=13
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.b11=0
        self.b12=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Pa')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=5.89
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.weight=Pa
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=231.036
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class dbA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(105)
        self.Q=self.e()*self.q
        self.tb=8
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Db')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.Sixd=True
        self.weight=Db
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*85)+(T*30)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class sA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(16)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('S')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=10.36001
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.weight=S
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=32.066
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class crA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(24)
        self.Q=self.e()*self.q
        self.tb=8
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Cr')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.76651 
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.weight=Cr
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=51.9961
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class seA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(34)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Se')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=9.752392
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.weight=Se
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=78.96
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class moA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(42)
        self.Q=self.e()*self.q
        self.tb=8
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Mo')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.09243
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.weight=Mo
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=95.94
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class tcA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(43)
        self.Q=self.e()*self.q
        self.tb=7
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Tc')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.11938
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.weight=Tc
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*19)+(T*20)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class ruA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(44)
        self.Q=self.e()*self.q
        self.tb=6
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ru')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.36050
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.weight=Ru
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=101.07
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class rhA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(45)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Rh')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.45890
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.weight=Rh
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=102.906
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class teA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(52)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Te')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=9.00966
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.weight=Te
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=127.60
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
class xeA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(54)
        self.Q=self.e()*self.q
        self.tb=0
        self.bonds=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Xe')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=12.1298431
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.weight=Xe
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=131.29
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
   
class wA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(74)
        self.Q=self.e()*self.q
        self.tb=8
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('W')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.86403
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.weight=W
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=183.84
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class osA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(55)
        self.Q=self.e()*self.q
        self.tb=6
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Os')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.43823
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.weight=Os
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=190.23
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class irA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(77)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ir')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.96702
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.weight=Ir
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=192.22
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class ptA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(78)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Pt')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.95883
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.weight=Pt
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=195.08
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class poA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(84)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Po')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=8.414
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.weight=Po
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*65)+(T*26)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class rnA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(86)
        self.Q=self.e()*self.q
        self.bonds=0
        self.tb=0
        x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Rn')
        self.volume=(4/3)*pi*self.radius**3
        iE=10.74850
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.weight=Rn
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*67)+(T*29)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class uA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(92)
        self.Q=self.e()*self.q
        self.tb=0
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.b11=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('U')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.19405
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.weight=U
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=238.029
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class npA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(93)
        self.Q=self.e()*self.q
        self.tb=11
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.b10=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Np')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.2655
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.weight=Np
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=237.048
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class puA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(94)
        self.Q=self.e()*self.q
        self.tb=10
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.b7=0
        self.b8=0
        self.b9=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Pu')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=6.0258
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.weight=Pu
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*91)+(T*20)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class sgA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(106)
        self.Q=self.e()*self.q
        self.tb=7
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Sg')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.8
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.Sixd=True
        self.sIxd=True
        self.weight=Sg
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*102)+(T*20)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class cnA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(112)
        self.Q=self.e()*self.q
        self.tb=2
        self.bonds=0
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Cn')
        self.volume=(4/3)*pi*self.radius**3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.Sixd=True
        self.sIxd=True
        self.siXd=True
        self.sixD=True
        self.SIxd=True
        self.sIXd=True
        self.siXD=True
        self.SIXd=True
        self.weight=Cn
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*110)+(T*21)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class iA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(53)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('I')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=10.45126
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.weight=I
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=126.904
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class reA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(75)
        self.Q=self.e()*self.q
        self.tb=7
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.b6=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Re')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.83352
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.weight=Re
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=186.207
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class atA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(85)
        self.Q=self.e()*self.q
        self.tb=1
        self.bonds=0
        self.b0=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('At')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=9.31751
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.weight=At
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*76)+(T*19)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class bhA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(107)
        self.Q=self.e()*self.q
        self.tb=6
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.b5=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Bh')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.7
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.Sixd=True
        self.sIxd=True
        self.siXd=True
        self.weight=Bh
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*95)+(T*24)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class hsA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(108)
        self.Q=self.e()*self.q
        self.tb=5
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.b4=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Hs')
        self.volume=(4/3)*pi*self.radius**3
        self.iE=7.6
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.Sixd=True
        self.sIxd=True
        self.siXd=True
        self.sixD=True
        self.weight=Hs
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*96)+(T*25)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class mtA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(109)
        self.Q=self.e()*self.q
        self.tb=4
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.b3=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Mt')
        self.volume=(4/3)*pi*self.radius**3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.Sixd=True
        self.sIxd=True
        self.siXd=True
        self.sixD=True
        self.SIxd=True
        self.weight=Mt
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*94)+(T*26)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class dsA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(110)
        self.Q=self.e()*self.q
        self.tb=3
        self.bonds=0
        self.b0=0
        self.b1=0
        self.b2=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Ds')
        self.volume=(4/3)*pi*self.radius**3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.Sixd=True
        self.sIxd=True
        self.siXd=True
        self.sixD=True
        self.SIxd=True
        self.sIXd=True
        self.weight=Ds
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*94)+(T*27)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
    
class rgA(world):
    def __init__(self):
        self.A=atom()
        self.A.sets(111)
        self.Q=self.e()*self.q
        self.bonds=0
        self.tb=2
        self.b0=0
        self.b1=0
        self.x={'x':0,'y':0,'z':0}
        self.radius=pickle.loads(Atomsr).get('Rg')
        self.volume=(4/3)*pi*self.radius**3
        self.ONEs= True
        self.ones=True
        self.TWOs=True
        self.twos=True
        self.TWOp=True
        self.twop=True
        self.tWop=True
        self.Twop=True
        self.twOp=True
        self.twoP=True
        self.THREEs=True
        self.threes=True
        self.THREEp=True
        self.threep=True
        self.Threep=True
        self.tHreep=True
        self.thReep=True
        self.thrEep=True
        self.FOURs=True
        self.fours=True
        self.THREEd=True
        self.threed=True
        self.Threed=True
        self.tHreed=True
        self.thReed=True
        self.thrEed=True
        self.threEd=True
        self.threeD=True
        self.THreed=True
        self.tHReed=True
        self.FOURp=True
        self.fourp=True
        self.Fourp=True
        self.fOurp=True
        self.foUrp=True
        self.fouRp=True
        self.FIVEs=True
        self.fives=True
        self.FOURd=True
        self.fourd=True
        self.Fourd=True
        self.fOurd=True
        self.foUrd=True
        self.fouRd=True
        self.fourD=True
        self.FOurd=True
        self.fOUrd=True
        self.foURd=True
        self.FIVEp=True
        self.fivep=True
        self.Fivep=True
        self.fIvep=True
        self.fiVep=True
        self.fivEp=True
        self.SIXs=True
        self.sixs=True
        self.FOURf=True
        self.fourf=True
        self.Fourf=True
        self.fOurf=True
        self.foUrf=True
        self.fouRf=True
        self.fourF=True
        self.FOurf=True
        self.fOUrf=True
        self.foURf=True
        self.fouRF=True
        self.FOUrf=True
        self.fOURf=True
        self.foURF=True
        self.FIVEd=True
        self.fived=True
        self.Fived=True
        self.fIved=True
        self.fiVed=True
        self.fivEd=True
        self.fiveD=True
        self.FIved=True
        self.fIVed=True
        self.fiVEd=True
        self.SIXp=True
        self.sixp=True
        self.Sixp=True
        self.sIxp=True
        self.siXp=True
        self.sixP=True
        self.SEVENs=True
        self.sevens=True
        self.FIVEf=True
        self.fivef=True
        self.Fivef=True
        self.fIvef=True
        self.fiVef=True
        self.fivEf=True
        self.fiveF=True
        self.FIvef=True
        self.fIVef=True
        self.fiVEf=True
        self.fivEF=True
        self.FIVef=True
        self.fIVEf=True
        self.fiVEF=True
        self.SIXd=True
        self.sixd=True
        self.Sixd=True
        self.sIxd=True
        self.siXd=True
        self.sixD=True
        self.SIxd=True
        self.sIXd=True
        self.siXD=True
        self.weight=Rg
        self.Mass=self.weight/Gr
    
    def mass(self):
        m=(D*93)+(T*28)
        x=m/av
        return x
    def rQ(self):
        return self.e()*self.q
    def rnQ(self):
        return self.be()*self.q
class atmspwn():
    def __init__(self):
        self.c=0
        self.mc=0
        self.n='atm'
        self.m=0
        self.ml=[]
        self.lm=[]
        self.lM=[]
        self.la=[]
        self.ipl=[]
        self.inl=[]
        self.iel=[]
        self.anl=[]
        self.mnl=[]
    def fml(self):
        for i in self.la:
            self.ml.append(i.mass())
atm=atmspwn()
class atom():
    def __init__(self):
        self.n=0
        self.l=[]
        self.vl=[]
        self.f=frame(pos=vector(random.randrange(-10e12,10e12),random.randrange(-10e12,10e12),random.randrange(-10e12,10e12)))
    def mvf(self):
        self.f.pos.x=self.com()[0]
        self.f.pos.y=self.com()[1]
        self.f.pos.z=self.com()[2]
    def rpQ(self):
        return self.n*1.60217656535*10**-19
    def com(self):
        X=0
        Y=0
        Z=0
        mt=0
        mgx=0
        mgy=0
        mgz=0
        ll=[]
        ml=[]
        t1=0
        popr=0
        for obj in self.f.objects:
                ll.append(obj.pos)
        for i in ll:
            try:
                ll.pop(popr)
                ll.pop(popr)
                ll.pop(popr)
                popr+=1
            except IndexError:
                pass
        for i in self.l:
            ml.append(i.mass)
            
        for i in ml:
            try:
                mgx+=i*(ll[t1][0])
                mgy+=i*(ll[t1][1])
                mgz+=i*(ll[t1][2])
                t1+=1
            except IndexError:
                pass
        
        X+=mgx/sum(ml)
        Y+=mgy/sum(ml)
        Z+=mgz/sum(ml)
        return [X,Y,Z]
    def sets(self,n):
        N=n
        self.n+=n
        while N !=0:
            if md==0:
                exec('self.pr'+str(N)+"=sphere(pos=(random.randrange(-1e11,1e11),random.randrange(-1e11,1e11),random.randrange(-1e11,1e11)),frame=self.f, radius=0.3e10, color=color.red,material=materials.emissive,make_trail=False, interval=0, retain=0)")
                exec('self.pr'+str(N)+'.mass=1.007276466812e30')
                exec('self.pr'+str(N)+'.Q=1.60217656535*10**-19')
                exec("self.pr"+str(N)+".p=vector(random.randrange(-1e4,1e4), random.randrange(-1e4,1e4), random.randrange(-1e4,1e4)) * eval('self.pr'+str(N)+'.mass')")

                exec("self.ne"+str(N)+"=sphere(pos=(-(eval('self.pr'+str(N)+'.pos.x')),-(eval('self.pr'+str(N)+'.pos.y')),-(eval('self.pr'+str(N)+'.pos.z'))),frame=self.f, radius=0.25e10, color=color.yellow,material=materials.emissive, make_trail=False, interval=0, retain=0)")
                exec('self.ne'+str(N)+'.mass=1.00866491600e30')
                exec('self.ne'+str(N)+'.Q=0.00000000001*10**-30')
                exec("self.ne"+str(N)+".p=vector(random.randrange(-1e4,1e4), random.randrange(-1e4,1e4), random.randrange(-1e4,1e4)) * eval('self.ne'+str(N)+'.mass')")

                exec("self.el"+str(N)+"=sphere(pos=(-(eval('self.pr'+str(N)+'.pos.x+3.5')),-(eval('self.pr'+str(N)+'.pos.y')),-(eval('self.pr'+str(N)+'.pos.z'))),frame=self.f, radius=0.2e10, color=color.blue,material=materials.emissive, make_trail=False, interval=0, retain=0)")
                exec('self.el'+str(N)+'.mass=5.4857990946e27')
                exec('self.el'+str(N)+'.Q=-1.60217656535*10**-19')
                exec("self.el"+str(N)+".p=vector(random.randrange(-1e4,1e4), random.randrange(-1e4,1e4), random.randrange(-1e4,1e4)) * eval('self.el'+str(N)+'.mass')")

                self.l.append(eval('self.pr'+str(N)))
                self.l.append(eval('self.ne'+str(N)))
                self.l.append(eval('self.el'+str(N)))

                N-=1
                if N==0:
                    break
            elif md==1:
                if N==1:
                    exec('self.pr'+str(N)+"=sphere(pos=(random.randrange(-1e11,1e11),random.randrange(-1e11,1e11),random.randrange(-1e11,1e11)),frame=self.f, radius=2.5e10, color=color.red,material=materials.emissive,make_trail=True, interval=10, retain=200)")
                else:
                    exec('self.pr'+str(N)+"=sphere(pos=(random.randrange(-1e11,1e11),random.randrange(-1e11,1e11),random.randrange(-1e11,1e11)),frame=self.f, radius=2.5e10, color=color.red,material=materials.emissive,make_trail=False, interval=0, retain=0,visible=False)")
                exec('self.pr'+str(N)+'.mass=1.007276466812e30')
                exec('self.pr'+str(N)+'.Q=1.60217656535*10**-19')
                exec("self.pr"+str(N)+".p=vector(random.randrange(-1e4,1e4), random.randrange(-1e4,1e4), random.randrange(-1e4,1e4)) * eval('self.pr'+str(N)+'.mass')")

                exec("self.ne"+str(N)+"=sphere(pos=(-(eval('self.pr'+str(N)+'.pos.x')),-(eval('self.pr'+str(N)+'.pos.y')),-(eval('self.pr'+str(N)+'.pos.z'))),frame=self.f, radius=1.5e10, color=color.yellow,material=materials.emissive, make_trail=False, interval=0, retain=0,visible=False)")
                exec('self.ne'+str(N)+'.mass=1.00866491600e30')
                exec('self.ne'+str(N)+'.Q=0.00000000001*10**-30')
                exec("self.ne"+str(N)+".p=(eval('self.pr'+str(N)+'.p'))")

                exec("self.el"+str(N)+"=sphere(pos=(-(eval('self.pr'+str(N)+'.pos.x+3.5')),-(eval('self.pr'+str(N)+'.pos.y')),-(eval('self.pr'+str(N)+'.pos.z'))),frame=self.f, radius=0.5e10, color=color.blue,material=materials.emissive, make_trail=False, interval=0, retain=0,visible=False)")
                exec('self.el'+str(N)+'.mass=5.4857990946e27')
                exec('self.el'+str(N)+'.Q=-1.60217656535*10**-19')
                exec("self.el"+str(N)+".p=(eval('self.pr'+str(N)+'.p'))")

                
                
                self.l.append(eval('self.pr'+str(N)))
                self.l.append(eval('self.ne'+str(N)))
                self.l.append(eval('self.el'+str(N)))

                N-=1
                if N==0:
                    break                 
def spwnatm(a):
    nm=[]
    if a==1:
        globals()["atm"+str(atm.c)]=hA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0])) 
        atm.c+=1
    elif a==2:
        globals()["atm"+str(atm.c)]=heA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==3:
        globals()["atm"+str(atm.c)]=liA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==4:
        globals()["atm"+str(atm.c)]=beA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==5:
        globals()["atm"+str(atm.c)]=bA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==6:
        globals()["atm"+str(atm.c)]=cA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==7:
        globals()["atm"+str(atm.c)]=nA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==8:
        globals()["atm"+str(atm.c)]=oA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==9:
        globals()["atm"+str(atm.c)]=fA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==10:
        globals()["atm"+str(atm.c)]=neA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==11:
        globals()["atm"+str(atm.c)]=naA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==12:
        globals()["atm"+str(atm.c)]=mgA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==13:
        globals()["atm"+str(atm.c)]=alA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==14:
        globals()["atm"+str(atm.c)]=siA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==15:
        globals()["atm"+str(atm.c)]=pA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==16:
        globals()["atm"+str(atm.c)]=sA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==17:
        globals()["atm"+str(atm.c)]=clA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==18:
        globals()["atm"+str(atm.c)]=arA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==19:
        globals()["atm"+str(atm.c)]=kA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==20:
        globals()["atm"+str(atm.c)]=caA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==21:
        globals()["atm"+str(atm.c)]=scA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==22:
        globals()["atm"+str(atm.c)]=tiA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==23:
        globals()["atm"+str(atm.c)]=vA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==24:
        globals()["atm"+str(atm.c)]=crA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==25:
        globals()["atm"+str(atm.c)]=mnA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==26:
        globals()["atm"+str(atm.c)]=feA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==27:
        globals()["atm"+str(atm.c)]=coA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==28:
        globals()["atm"+str(atm.c)]=niA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==29:
        globals()["atm"+str(atm.c)]=cuA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==30:
        globals()["atm"+str(atm.c)]=znA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==31:
        globals()["atm"+str(atm.c)]=gaA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==32:
        globals()["atm"+str(atm.c)]=geA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==33:
        globals()["atm"+str(atm.c)]=asA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==34:
        globals()["atm"+str(atm.c)]=seA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==35:
        globals()["atm"+str(atm.c)]=brA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==36:
        globals()["atm"+str(atm.c)]=krA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==37:
        globals()["atm"+str(atm.c)]=rbA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==38:
        globals()["atm"+str(atm.c)]=srA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==39:
        globals()["atm"+str(atm.c)]=yA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==40:
        globals()["atm"+str(atm.c)]=zrA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==41:
        globals()["atm"+str(atm.c)]=nbA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==42:
        globals()["atm"+str(atm.c)]=moA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==43:
        globals()["atm"+str(atm.c)]=tcA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==44:
        globals()["atm"+str(atm.c)]=ruA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==45:
        globals()["atm"+str(atm.c)]=rhA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==46:
        globals()["atm"+str(atm.c)]=pdA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==47:
        globals()["atm"+str(atm.c)]=agA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==48:
        globals()["atm"+str(atm.c)]=cdA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==49:
        globals()["atm"+str(atm.c)]=inA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==50:
        globals()["atm"+str(atm.c)]=snA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==51:
        globals()["atm"+str(atm.c)]=sbA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==52:
        globals()["atm"+str(atm.c)]=teA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==53:
        globals()["atm"+str(atm.c)]=iA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==54:
        globals()["atm"+str(atm.c)]=xeA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==55:
        globals()["atm"+str(atm.c)]=csA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==56:
        globals()["atm"+str(atm.c)]=baA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==57:
        globals()["atm"+str(atm.c)]=laA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==58:
        globals()["atm"+str(atm.c)]=ceA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==59:
        globals()["atm"+str(atm.c)]=prA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==60:
        globals()["atm"+str(atm.c)]=ndA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==61:
        globals()["atm"+str(atm.c)]=pmA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==62:
        globals()["atm"+str(atm.c)]=smA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==63:
        globals()["atm"+str(atm.c)]=euA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==64:
        globals()["atm"+str(atm.c)]=gdA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==65:
        globals()["atm"+str(atm.c)]=tbA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==66:
        globals()["atm"+str(atm.c)]=dyA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==67:
        globals()["atm"+str(atm.c)]=hoA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==68:
        globals()["atm"+str(atm.c)]=erA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==69:
        globals()["atm"+str(atm.c)]=tmA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==70:
        globals()["atm"+str(atm.c)]=ybA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==71:
        globals()["atm"+str(atm.c)]=acA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==72:
        globals()["atm"+str(atm.c)]=thA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==73:
        globals()["atm"+str(atm.c)]=paA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==74:
        globals()["atm"+str(atm.c)]=uA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==75:
        globals()["atm"+str(atm.c)]=npA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==76:
        globals()["atm"+str(atm.c)]=puA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==77:
        globals()["atm"+str(atm.c)]=amA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==78:
        globals()["atm"+str(atm.c)]=cmA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==79:
        globals()["atm"+str(atm.c)]=bkA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==80:
        globals()["atm"+str(atm.c)]=cfA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==81:
        globals()["atm"+str(atm.c)]=esA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==82:
        globals()["atm"+str(atm.c)]=fmA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==83:
        globals()["atm"+str(atm.c)]=mdA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==84:
        globals()["atm"+str(atm.c)]=noA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==85:
        globals()["atm"+str(atm.c)]=lrA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==86:
        globals()["atm"+str(atm.c)]=rfA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==87:
        globals()["atm"+str(atm.c)]=dbA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==88:
        globals()["atm"+str(atm.c)]=sgA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==89:
        globals()["atm"+str(atm.c)]=bhA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==90:
        globals()["atm"+str(atm.c)]=hsA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==91:
        globals()["atm"+str(atm.c)]=mtA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==92:
        globals()["atm"+str(atm.c)]=dsA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==93:
        globals()["atm"+str(atm.c)]=rgA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==94:
        globals()["atm"+str(atm.c)]=cnA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==95:
        globals()["atm"+str(atm.c)]=luA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==96:
        globals()["atm"+str(atm.c)]=hfA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==97:
        globals()["atm"+str(atm.c)]=taA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==98:
        globals()["atm"+str(atm.c)]=wA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==99:
        globals()["atm"+str(atm.c)]=reA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==100:
        globals()["atm"+str(atm.c)]=osA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==101:
        globals()["atm"+str(atm.c)]=irA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==102:
        globals()["atm"+str(atm.c)]=ptA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==103:
        globals()["atm"+str(atm.c)]=auA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==104:
        globals()["atm"+str(atm.c)]=hgA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==105:
        globals()["atm"+str(atm.c)]=tlA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==106:
        globals()["atm"+str(atm.c)]=pbA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==107:
        globals()["atm"+str(atm.c)]=biA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==108:
        globals()["atm"+str(atm.c)]=poA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==109:
        globals()["atm"+str(atm.c)]=atA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==110:
        globals()["atm"+str(atm.c)]=rnA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==111:
        globals()["atm"+str(atm.c)]=frA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    elif a==112:
        globals()["atm"+str(atm.c)]=raA()
        nm.append("atm"+str(atm.c))
        atm.la.append(eval(nm[0]))
        atm.c+=1
    exec(nm[0]+'.A.f.pos=((random.randrange(1,500))*10**9,(random.randrange(1,500))*10**9,(random.randrange(1,500))*10**9)')
    atm.anl.append(nm[0])
def gea(m):
    k=8.9875517873681764*10**9
    G=6.671281903963040991511534289*10**-11
    cl=itertools.combinations(m.A.l,2)    
    for i in cl:
        try:
            mp=midpoint(i[0].pos.x,i[0].pos.y,i[0].pos.z,i[1].pos.x,i[1].pos.y,i[1].pos.z)
            R=(calc_dist(i[0].pos,i[1].pos)/2)*10**-13           
            F=k*(i[0].Q*i[1].Q/R**2)
            gF=G*(i[0].mass*i[1].mass/R**2)    
            fstr=str(F)
            gstr=str(gF)
            pf=fstr.partition('e')
            pgf=gstr.partition('e')
            pvf=(int(pf[2]))-(2*int(pf[2]))+9.5
            pvgf=(int(pgf[2]))-(2*int(pgf[2]))+9.5           
            #print pvf, pvgf
            if i[0].pos.x>mp[0]:
                i[0].pos.x=i[0].pos.x-(gF*10**pvgf)
            if i[1].pos.x>mp[0]:
                i[1].pos.x=i[1].pos.x-(gF*10**pvgf)
            if i[0].pos.x<mp[0]:
                i[0].pos.x=i[0].pos.x+(gF*10**pvgf)
            if i[1].pos.x<mp[0]:
                i[1].pos.x=i[1].pos.x+(gF*10**pvgf)

            if i[0].pos.y>mp[1]:
                i[0].pos.y=i[0].pos.y-(gF*10**pvgf)
            if i[1].pos.y>mp[1]:
                i[1].pos.y=i[1].pos.y-(gF*10**pvgf)
            if i[0].pos.y<mp[1]:
                i[0].pos.y=i[0].pos.y+(gF*10**pvgf)
            if i[1].pos.y<mp[1]:
                i[1].pos.y=i[1].pos.y+(gF*10**pvgf)

            if i[0].pos.z>mp[2]:
                i[0].pos.z=i[0].pos.z-(gF*10**pvgf)
            if i[1].pos.z>mp[2]:
                i[1].pos.z=i[1].pos.z-(gF*10**pvgf)
            if i[0].pos.z<mp[2]:
                i[0].pos.z=i[0].pos.z+(gF*10**pvgf)
            if i[1].pos.z<mp[2]:
                i[1].pos.z=i[1].pos.z+(gF*10**pvgf)
                
            if i[0].pos.x<mp[0]:
                i[0].pos.x=i[0].pos.x-(F*10**pvf)
            if i[1].pos.x<mp[0]:
                i[1].pos.x=i[1].pos.x-(F*10**pvf)
            if i[0].pos.x>mp[0]:
                i[0].pos.x=i[0].pos.x+(F*10**pvf)
            if i[1].pos.x>mp[0]:
                i[1].pos.x=i[1].pos.x+(F*10**pvf)

            if i[0].pos.y<mp[1]:
                i[0].pos.y=i[0].pos.y-(F*10**pvf)
            if i[1].pos.y<mp[1]:
                i[1].pos.y=i[1].pos.y-(F*10**pvf)
            if i[0].pos.y>mp[1]:
                i[0].pos.y=i[0].pos.y+(F*10**pvf)
            if i[1].pos.y>mp[1]:
                i[1].pos.y=i[1].pos.y+(F*10**pvf)

            if i[0].pos.z<mp[2]:
                i[0].pos.z=i[0].pos.z-(F*10**pvf)
            if i[1].pos.z<mp[2]:
                i[1].pos.z=i[1].pos.z-(F*10**pvf)
            if i[0].pos.z>mp[2]:
                i[0].pos.z=i[0].pos.z+(F*10**pvf)
            if i[1].pos.z>mp[2]:
                i[1].pos.z=i[1].pos.z+(F*10**pvf)

        except ValueError:
            pass                    

def gem(m):
    k=8.9875517873681764*10**9
    G=6.67384*10**-11
    cl=itertools.combinations(m.v,2)
    
    for i in cl:
        try:
            mp=midpoint(i[0].A.f.pos.x,i[0].A.f.pos.y,i[0].A.f.pos.z,i[1].A.f.pos.x,i[1].A.f.pos.y,i[1].A.f.pos.z)
            R=(calc_dist(i[0].A.f.pos,i[1].A.f.pos)/2)*10**-13
            F=k*(i[0].A.rpQ()*i[1].A.rpQ()/R**2)
            gF=G*(i[0].mass()*i[1].mass()/R**2)
            eF=k*(i[0].rQ()*i[1].rQ()/R**2)
            peF=k*(i[0].rnQ()*i[1].rnQ()/R**2)
            aeF=k*(i[0].rQ()*i[1].rnQ()/R**2)
            apeF=k*(i[0].rnQ()*i[1].rQ()/R**2)
            rpl=eF+peF
            atr=aeF+apeF
            fstr=str(F)
            gstr=str(gF)
            estr=str(rpl)
            pstr=str(atr)
            pf=fstr.partition('e')
            pgf=gstr.partition('e')
            ef=estr.partition('e')
            pef=pstr.partition('e')
            pvf=(int(pf[2]))-(2*int(pf[2]))+9.5
            pvgf=(int(pgf[2]))-(2*int(pgf[2]))+9.5
            prpl=(int(ef[2]))-(2*int(ef[2]))+9.5
            patr=(int(pef[2]))-(2*int(pef[2]))+9.5
            #print gF
            
            if i[0].A.f.pos.x>mp[0]:
                i[0].A.f.pos.x=i[0].A.f.pos.x-(gF*10**pvgf)
            if i[1].A.f.pos.x>mp[0]:
                i[1].A.f.pos.x=i[1].A.f.pos.x-(gF*10**pvgf)
            if i[0].A.f.pos.x<mp[0]:
                i[0].A.f.pos.x=i[0].A.f.pos.x+(gF*10**pvgf)
            if i[1].A.f.pos.x<mp[0]:
                i[1].A.f.pos.x=i[1].A.f.pos.x+(gF*10**pvgf)

            if i[0].A.f.pos.y>mp[1]:
                i[0].A.f.pos.y=i[0].A.f.pos.y-(gF*10**pvgf)
            if i[1].A.f.pos.y>mp[1]:
                i[1].A.f.pos.y=i[1].A.f.pos.y-(gF*10**pvgf)
            if i[0].A.f.pos.y<mp[1]:
                i[0].A.f.pos.y=i[0].A.f.pos.y+(gF*10**pvgf)
            if i[1].A.f.pos.y<mp[1]:
                i[1].A.f.pos.y=i[1].A.f.pos.y+(gF*10**pvgf)

            if i[0].A.f.pos.z>mp[2]:
                i[0].A.f.pos.z=i[0].A.f.pos.z-(gF*10**pvgf)
            if i[1].A.f.pos.z>mp[2]:
                i[1].A.f.pos.z=i[1].A.f.pos.z-(gF*10**pvgf)
            if i[0].A.f.pos.z<mp[2]:
                i[0].A.f.pos.z=i[0].A.f.pos.z+(gF*10**pvgf)
            if i[1].A.f.pos.z<mp[2]:
                i[1].A.f.pos.z=i[1].A.f.pos.z+(gF*10**pvgf)
                
            if i[0].A.f.pos.x<mp[0]:
                i[0].A.f.pos.x=i[0].A.f.pos.x-(F*10**pvf)
            if i[1].A.f.pos.x<mp[0]:
                i[1].A.f.pos.x=i[1].A.f.pos.x-(F*10**pvf)
            if i[0].A.f.pos.x>mp[0]:
                i[0].A.f.pos.x=i[0].A.f.pos.x+(F*10**pvf)
            if i[1].A.f.pos.x>mp[0]:
                i[1].A.f.pos.x=i[1].A.f.pos.x+(F*10**pvf)

            if i[0].A.f.pos.y<mp[1]:
                i[0].A.f.pos.y=i[0].A.f.pos.y-(F*10**pvf)
            if i[1].A.f.pos.y<mp[1]:
                i[1].A.f.pos.y=i[1].A.f.pos.y-(F*10**pvf)
            if i[0].A.f.pos.y>mp[1]:
                i[0].A.f.pos.y=i[0].A.f.pos.y+(F*10**pvf)
            if i[1].A.f.pos.y>mp[1]:
                i[1].A.f.pos.y=i[1].A.f.pos.y+(F*10**pvf)

            if i[0].A.f.pos.z<mp[2]:
                i[0].A.f.pos.z=i[0].A.f.pos.z-(F*10**pvf)
            if i[1].A.f.pos.z<mp[2]:
                i[1].A.f.pos.z=i[1].A.f.pos.z-(F*10**pvf)
            if i[0].A.f.pos.z>mp[2]:
                i[0].A.f.pos.z=i[0].A.f.pos.z+(F*10**pvf)
            if i[1].A.f.pos.z>mp[2]:
                i[1].A.f.pos.z=i[1].A.f.pos.z+(F*10**pvf)

            if i[0].A.f.pos.x>mp[0]:
                i[0].A.f.pos.x=i[0].A.f.pos.x-(atr*10**patr)
            if i[1].A.f.pos.x>mp[0]:
                i[1].A.f.pos.x=i[1].A.f.pos.x-(atr*10**patr)
            if i[0].A.f.pos.x<mp[0]:
                i[0].A.f.pos.x=i[0].A.f.pos.x+(atr*10**patr)
            if i[1].A.f.pos.x<mp[0]:
                i[1].A.f.pos.x=i[1].A.f.pos.x+(atr*10**patr)

            if i[0].A.f.pos.y>mp[1]:
                i[0].A.f.pos.y=i[0].A.f.pos.y-(atr*10**patr)
            if i[1].A.f.pos.y>mp[1]:
                i[1].A.f.pos.y=i[1].A.f.pos.y-(atr*10**patr)
            if i[0].A.f.pos.y<mp[1]:
                i[0].A.f.pos.y=i[0].A.f.pos.y+(atr*10**patr)
            if i[1].A.f.pos.y<mp[1]:
                i[1].A.f.pos.y=i[1].A.f.pos.y+(atr*10**patr)

            if i[0].A.f.pos.z>mp[2]:
                i[0].A.f.pos.z=i[0].A.f.pos.z-(atr*10**patr)
            if i[1].A.f.pos.z>mp[2]:
                i[1].A.f.pos.z=i[1].A.f.pos.z-(atr*10**patr)
            if i[0].A.f.pos.z<mp[2]:
                i[0].A.f.pos.z=i[0].A.f.pos.z+(atr*10**patr)
            if i[1].A.f.pos.z<mp[2]:
                i[1].A.f.pos.z=i[1].A.f.pos.z+(atr*10**patr)
            
            if i[0].A.f.pos.x<mp[0]:
                i[0].A.f.pos.x=i[0].A.f.pos.x-(rpl*10**prpl)
            if i[1].A.f.pos.x<mp[0]:
                i[1].A.f.pos.x=i[1].A.f.pos.x-(rpl*10**prpl)
            if i[0].A.f.pos.x>mp[0]:
                i[0].A.f.pos.x=i[0].A.f.pos.x+(rpl*10**prpl)
            if i[1].A.f.pos.x>mp[0]:
                i[1].A.f.pos.x=i[1].A.f.pos.x+(rpl*10**prpl)

            if i[0].A.f.pos.y<mp[1]:
                i[0].A.f.pos.y=i[0].A.f.pos.y-(rpl*10**prpl)
            if i[1].A.f.pos.y<mp[1]:
                i[1].A.f.pos.y=i[1].A.f.pos.y-(rpl*10**prpl)
            if i[0].A.f.pos.y>mp[1]:
                i[0].A.f.pos.y=i[0].A.f.pos.y+(rpl*10**prpl)
            if i[1].A.f.pos.y>mp[1]:
                i[1].A.f.pos.y=i[1].A.f.pos.y+(rpl*10**prpl)

            if i[0].A.f.pos.z<mp[2]:
                i[0].A.f.pos.z=i[0].A.f.pos.z-(rpl*10**prpl)
            if i[1].A.f.pos.z<mp[2]:
                i[1].A.f.pos.z=i[1].A.f.pos.z-(rpl*10**prpl)
            if i[0].A.f.pos.z>mp[2]:
                i[0].A.f.pos.z=i[0].A.f.pos.z+(rpl*10**prpl)
            if i[1].A.f.pos.z>mp[2]:
                i[1].A.f.pos.z=i[1].A.f.pos.z+(rpl*10**prpl)
            print [(rpl*10**prpl),(atr*10**patr),(F*10**pvf),(gF*10**pvgf)]
        except ValueError:
            pass

class molecule():
    def __init__(self):
        self.v=[]
        self.mf=frame(pos=vector(self.com()))
    def com(self):
        X=0
        Y=0
        Z=0
        mt=0
        mgx=0
        mgy=0
        mgz=0
        ll=[]
        ml=[]
        t1=0
        popr=0
        for i in self.v:
                ll.append(i.A.com())
        for i in ll:
            try:
                ll.pop(popr)
                ll.pop(popr)
                ll.pop(popr)
                popr+=1
            except IndexError:
                pass
        for i in self.v:
            ml.append(i.mass())
            
        for i in ml:
            try:
                mgx+=i*(ll[t1][0])
                mgy+=i*(ll[t1][1])
                mgz+=i*(ll[t1][2])
                t1+=1
            except IndexError:
                pass
        
        X+=mgx/sum(ml)
        Y+=mgy/sum(ml)
        Z+=mgz/sum(ml)
        return [X,Y,Z]
    def sets(self,*args):
        for i in args:
            n=i[1]
            y=0
            while y==0:
                if n>0:
                    spwnatm(i[0])
                    self.v.append(eval("atm"+str(atm.c-1)))
                    n-=1
                elif n==0:
                    y+=1
            for i in self.v:
                i.A.pos=self.mf

def spwn(a):
    globals()["atm"+str(atm.c)]=atom()
    exec("atm"+str(atm.c)+".sets("+str(a)+")")
    exec('atm.anl.append("atm"+str(atm.c))')
    exec('atm.la.append(eval("atm"+str(atm.c)))')
    atm.c+=1
def geA():
    for i in atm.la:
        gea(i)
        if md==0:
            i.A.mvf()
def geM():
    for i in atm.lM:
        gem(i)
        if md==0:
            for i in i.v:
                i.A.mvf()
bum=molecule()

bum.sets([8,1],[1,2])
Bum=molecule()

Bum.sets([8,1],[1,2])
atm.lM.append(bum)
atm.lM.append(Bum)

def comsmpl(a):
    ll=[]
    X=0
    Y=0
    Z=0
    mt=0
    mgx=0
    mgy=0
    mgz=0
    for i in a.la:
        ll.append(i.A.com())
    #for i in self.ml:
    #    mt+=i
    t1=0
    a.fml()
    for i in a.ml:
        try:
            mgx+=i*(ll[t1][0])
            mgy+=i*(ll[t1][1])
            mgz+=i*(ll[t1][2])
            t1+=1
        except IndexError:
            pass
    X+=mgx/sum(a.ml)
    Y+=mgy/sum(a.ml)
    Z+=mgz/sum(a.ml)
    return [X,Y,Z]
def coe():
    ge=9.80665
    for i in atm.la:
        mp=midpoint(i.A.f.pos.x,i.A.f.pos.y,i.A.f.pos.z,comsmpl(atm)[0],comsmpl(atm)[1],comsmpl(atm)[2])
        R=(calc_dist(comsmpl(atm),i.A.f.pos)/2)*10**-13
        if i[0].A.f.pos.x>mp[0]:
            i[0].A.f.pos.x=i[0].A.f.pos.x-(gF*10**pvgf)
        if i[1].A.f.pos.x>mp[0]:
            i[1].A.f.pos.x=i[1].A.f.pos.x-(gF*10**pvgf)
        if i[0].A.f.pos.x<mp[0]:
            i[0].A.f.pos.x=i[0].A.f.pos.x+(gF*10**pvgf)
        if i[1].A.f.pos.x<mp[0]:
            i[1].A.f.pos.x=i[1].A.f.pos.x+(gF*10**pvgf)

        if i[0].A.f.pos.y>mp[1]:
            i[0].A.f.pos.y=i[0].A.f.pos.y-(gF*10**pvgf)
        if i[1].A.f.pos.y>mp[1]:
            i[1].A.f.pos.y=i[1].A.f.pos.y-(gF*10**pvgf)
        if i[0].A.f.pos.y<mp[1]:
            i[0].A.f.pos.y=i[0].A.f.pos.y+(gF*10**pvgf)
        if i[1].A.f.pos.y<mp[1]:
            i[1].A.f.pos.y=i[1].A.f.pos.y+(gF*10**pvgf)

        if i[0].A.f.pos.z>mp[2]:
            i[0].A.f.pos.z=i[0].A.f.pos.z-(gF*10**pvgf)
        if i[1].A.f.pos.z>mp[2]:
            i[1].A.f.pos.z=i[1].A.f.pos.z-(gF*10**pvgf)
        if i[0].A.f.pos.z<mp[2]:
            i[0].A.f.pos.z=i[0].A.f.pos.z+(gF*10**pvgf)
        if i[1].A.f.pos.z<mp[2]:
            i[1].A.f.pos.z=i[1].A.f.pos.z+(gF*10**pvgf)
#spwnatm(6)
#spwnatm(6)
#spwnm([6,1],[6,1])
while True:
  rate(20)
  geA()
  geM()
  #print bum.com()
  #print comsmpl(atm)
  

